<?php
/**
 * MarketplacesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * MarketplacesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketplacesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation marketplacesAliasRead
     *
     * Retrieves the details of an alias.
     *
     * @param  string $alias Select the alias details using the alias itself. (required)
     * @param  string $marketplace Select the marketplace using the unique marketplace identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetTokenDetails
     */
    public function marketplacesAliasRead($alias, $marketplace)
    {
        list($response) = $this->marketplacesAliasReadWithHttpInfo($alias, $marketplace);
        return $response;
    }

    /**
     * Operation marketplacesAliasReadWithHttpInfo
     *
     * Retrieves the details of an alias.
     *
     * @param  string $alias Select the alias details using the alias itself. (required)
     * @param  string $marketplace Select the marketplace using the unique marketplace identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetTokenDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesAliasReadWithHttpInfo($alias, $marketplace)
    {
        $returnType = '\Swagger\Client\Model\GetTokenDetails';
        $request = $this->marketplacesAliasReadRequest($alias, $marketplace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetTokenDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesAliasReadAsync
     *
     * Retrieves the details of an alias.
     *
     * @param  string $alias Select the alias details using the alias itself. (required)
     * @param  string $marketplace Select the marketplace using the unique marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesAliasReadAsync($alias, $marketplace)
    {
        return $this->marketplacesAliasReadAsyncWithHttpInfo($alias, $marketplace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesAliasReadAsyncWithHttpInfo
     *
     * Retrieves the details of an alias.
     *
     * @param  string $alias Select the alias details using the alias itself. (required)
     * @param  string $marketplace Select the marketplace using the unique marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesAliasReadAsyncWithHttpInfo($alias, $marketplace)
    {
        $returnType = '\Swagger\Client\Model\GetTokenDetails';
        $request = $this->marketplacesAliasReadRequest($alias, $marketplace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesAliasRead'
     *
     * @param  string $alias Select the alias details using the alias itself. (required)
     * @param  string $marketplace Select the marketplace using the unique marketplace identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesAliasReadRequest($alias, $marketplace)
    {
        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling marketplacesAliasRead'
            );
        }
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesAliasRead'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/alias/{alias}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }
        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesList
     *
     * List of marketplace to which you have at least view access privilege.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function marketplacesList($ordering = null, $page = null)
    {
        list($response) = $this->marketplacesListWithHttpInfo($ordering, $page);
        return $response;
    }

    /**
     * Operation marketplacesListWithHttpInfo
     *
     * List of marketplace to which you have at least view access privilege.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesListWithHttpInfo($ordering = null, $page = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesListRequest($ordering, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesListAsync
     *
     * List of marketplace to which you have at least view access privilege.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesListAsync($ordering = null, $page = null)
    {
        return $this->marketplacesListAsyncWithHttpInfo($ordering, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesListAsyncWithHttpInfo
     *
     * List of marketplace to which you have at least view access privilege.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesListAsyncWithHttpInfo($ordering = null, $page = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesListRequest($ordering, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesList'
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesListRequest($ordering = null, $page = null)
    {

        $resourcePath = '/marketplaces/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesOrdersList
     *
     * List of orders related to a single marketplace.
     *
     * @param  string $marketplace marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the order using its unique identifier (optional)
     * @param  string $marketplace2 Select the marketplace using the unique marketplace identifier. (optional)
     * @param  float $amount Filter by total amount of the order. (optional)
     * @param  string $status Filter by the current status of the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function marketplacesOrdersList($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $amount = null, $status = null)
    {
        list($response) = $this->marketplacesOrdersListWithHttpInfo($marketplace, $ordering, $page, $uuid, $marketplace2, $amount, $status);
        return $response;
    }

    /**
     * Operation marketplacesOrdersListWithHttpInfo
     *
     * List of orders related to a single marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the order using its unique identifier (optional)
     * @param  string $marketplace2 Select the marketplace using the unique marketplace identifier. (optional)
     * @param  float $amount Filter by total amount of the order. (optional)
     * @param  string $status Filter by the current status of the order. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesOrdersListWithHttpInfo($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $amount = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesOrdersListRequest($marketplace, $ordering, $page, $uuid, $marketplace2, $amount, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesOrdersListAsync
     *
     * List of orders related to a single marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the order using its unique identifier (optional)
     * @param  string $marketplace2 Select the marketplace using the unique marketplace identifier. (optional)
     * @param  float $amount Filter by total amount of the order. (optional)
     * @param  string $status Filter by the current status of the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesOrdersListAsync($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $amount = null, $status = null)
    {
        return $this->marketplacesOrdersListAsyncWithHttpInfo($marketplace, $ordering, $page, $uuid, $marketplace2, $amount, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesOrdersListAsyncWithHttpInfo
     *
     * List of orders related to a single marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the order using its unique identifier (optional)
     * @param  string $marketplace2 Select the marketplace using the unique marketplace identifier. (optional)
     * @param  float $amount Filter by total amount of the order. (optional)
     * @param  string $status Filter by the current status of the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesOrdersListAsyncWithHttpInfo($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $amount = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesOrdersListRequest($marketplace, $ordering, $page, $uuid, $marketplace2, $amount, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesOrdersList'
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the order using its unique identifier (optional)
     * @param  string $marketplace2 Select the marketplace using the unique marketplace identifier. (optional)
     * @param  float $amount Filter by total amount of the order. (optional)
     * @param  string $status Filter by the current status of the order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesOrdersListRequest($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $amount = null, $status = null)
    {
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesOrdersList'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }
        // query params
        if ($marketplace2 !== null) {
            $queryParams['marketplace'] = ObjectSerializer::toQueryValue($marketplace2);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesRead
     *
     * Retrieves the details of a marketplace
     *
     * @param  string $uuid Select the marketplace using its unique identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Marketplace
     */
    public function marketplacesRead($uuid)
    {
        list($response) = $this->marketplacesReadWithHttpInfo($uuid);
        return $response;
    }

    /**
     * Operation marketplacesReadWithHttpInfo
     *
     * Retrieves the details of a marketplace
     *
     * @param  string $uuid Select the marketplace using its unique identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Marketplace, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesReadWithHttpInfo($uuid)
    {
        $returnType = '\Swagger\Client\Model\Marketplace';
        $request = $this->marketplacesReadRequest($uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Marketplace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesReadAsync
     *
     * Retrieves the details of a marketplace
     *
     * @param  string $uuid Select the marketplace using its unique identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesReadAsync($uuid)
    {
        return $this->marketplacesReadAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesReadAsyncWithHttpInfo
     *
     * Retrieves the details of a marketplace
     *
     * @param  string $uuid Select the marketplace using its unique identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesReadAsyncWithHttpInfo($uuid)
    {
        $returnType = '\Swagger\Client\Model\Marketplace';
        $request = $this->marketplacesReadRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesRead'
     *
     * @param  string $uuid Select the marketplace using its unique identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesReadRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling marketplacesRead'
            );
        }

        $resourcePath = '/marketplaces/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesRegistrationsList
     *
     * Retrieves the list of registrations by marketplace.
     *
     * @param  string $marketplace marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Filter by unique registration identifier. (optional)
     * @param  string $marketplace2 Filter by unique marketplace identifier (optional)
     * @param  string $name Filter by registration name. (optional)
     * @param  string $ref Filter by registration reference. (optional)
     * @param  string $status Filter by registration status. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function marketplacesRegistrationsList($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $name = null, $ref = null, $status = null)
    {
        list($response) = $this->marketplacesRegistrationsListWithHttpInfo($marketplace, $ordering, $page, $uuid, $marketplace2, $name, $ref, $status);
        return $response;
    }

    /**
     * Operation marketplacesRegistrationsListWithHttpInfo
     *
     * Retrieves the list of registrations by marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Filter by unique registration identifier. (optional)
     * @param  string $marketplace2 Filter by unique marketplace identifier (optional)
     * @param  string $name Filter by registration name. (optional)
     * @param  string $ref Filter by registration reference. (optional)
     * @param  string $status Filter by registration status. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesRegistrationsListWithHttpInfo($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $name = null, $ref = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesRegistrationsListRequest($marketplace, $ordering, $page, $uuid, $marketplace2, $name, $ref, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesRegistrationsListAsync
     *
     * Retrieves the list of registrations by marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Filter by unique registration identifier. (optional)
     * @param  string $marketplace2 Filter by unique marketplace identifier (optional)
     * @param  string $name Filter by registration name. (optional)
     * @param  string $ref Filter by registration reference. (optional)
     * @param  string $status Filter by registration status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesRegistrationsListAsync($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $name = null, $ref = null, $status = null)
    {
        return $this->marketplacesRegistrationsListAsyncWithHttpInfo($marketplace, $ordering, $page, $uuid, $marketplace2, $name, $ref, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesRegistrationsListAsyncWithHttpInfo
     *
     * Retrieves the list of registrations by marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Filter by unique registration identifier. (optional)
     * @param  string $marketplace2 Filter by unique marketplace identifier (optional)
     * @param  string $name Filter by registration name. (optional)
     * @param  string $ref Filter by registration reference. (optional)
     * @param  string $status Filter by registration status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesRegistrationsListAsyncWithHttpInfo($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $name = null, $ref = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesRegistrationsListRequest($marketplace, $ordering, $page, $uuid, $marketplace2, $name, $ref, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesRegistrationsList'
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Filter by unique registration identifier. (optional)
     * @param  string $marketplace2 Filter by unique marketplace identifier (optional)
     * @param  string $name Filter by registration name. (optional)
     * @param  string $ref Filter by registration reference. (optional)
     * @param  string $status Filter by registration status. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesRegistrationsListRequest($marketplace, $ordering = null, $page = null, $uuid = null, $marketplace2 = null, $name = null, $ref = null, $status = null)
    {
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesRegistrationsList'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/registrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }
        // query params
        if ($marketplace2 !== null) {
            $queryParams['marketplace'] = ObjectSerializer::toQueryValue($marketplace2);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($ref !== null) {
            $queryParams['ref'] = ObjectSerializer::toQueryValue($ref);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesSellersList
     *
     * List of sellers by marketplace.
     *
     * @param  string $marketplace marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function marketplacesSellersList($marketplace, $ordering = null, $page = null, $uuid = null, $status = null)
    {
        list($response) = $this->marketplacesSellersListWithHttpInfo($marketplace, $ordering, $page, $uuid, $status);
        return $response;
    }

    /**
     * Operation marketplacesSellersListWithHttpInfo
     *
     * List of sellers by marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesSellersListWithHttpInfo($marketplace, $ordering = null, $page = null, $uuid = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesSellersListRequest($marketplace, $ordering, $page, $uuid, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesSellersListAsync
     *
     * List of sellers by marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesSellersListAsync($marketplace, $ordering = null, $page = null, $uuid = null, $status = null)
    {
        return $this->marketplacesSellersListAsyncWithHttpInfo($marketplace, $ordering, $page, $uuid, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesSellersListAsyncWithHttpInfo
     *
     * List of sellers by marketplace.
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesSellersListAsyncWithHttpInfo($marketplace, $ordering = null, $page = null, $uuid = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesSellersListRequest($marketplace, $ordering, $page, $uuid, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesSellersList'
     *
     * @param  string $marketplace (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesSellersListRequest($marketplace, $ordering = null, $page = null, $uuid = null, $status = null)
    {
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesSellersList'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/sellers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesTransactionsList
     *
     * Transaction list by marketplace.
     *
     * @param  string $marketplace Filter by marketplace using the unique marketplace identifier. (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function marketplacesTransactionsList($marketplace, $ordering = null, $page = null)
    {
        list($response) = $this->marketplacesTransactionsListWithHttpInfo($marketplace, $ordering, $page);
        return $response;
    }

    /**
     * Operation marketplacesTransactionsListWithHttpInfo
     *
     * Transaction list by marketplace.
     *
     * @param  string $marketplace Filter by marketplace using the unique marketplace identifier. (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesTransactionsListWithHttpInfo($marketplace, $ordering = null, $page = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesTransactionsListRequest($marketplace, $ordering, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesTransactionsListAsync
     *
     * Transaction list by marketplace.
     *
     * @param  string $marketplace Filter by marketplace using the unique marketplace identifier. (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesTransactionsListAsync($marketplace, $ordering = null, $page = null)
    {
        return $this->marketplacesTransactionsListAsyncWithHttpInfo($marketplace, $ordering, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesTransactionsListAsyncWithHttpInfo
     *
     * Transaction list by marketplace.
     *
     * @param  string $marketplace Filter by marketplace using the unique marketplace identifier. (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesTransactionsListAsyncWithHttpInfo($marketplace, $ordering = null, $page = null)
    {
        $returnType = 'object';
        $request = $this->marketplacesTransactionsListRequest($marketplace, $ordering, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesTransactionsList'
     *
     * @param  string $marketplace Filter by marketplace using the unique marketplace identifier. (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesTransactionsListRequest($marketplace, $ordering = null, $page = null)
    {
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesTransactionsList'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesWebhooksCreate
     *
     * Create a single webhook for the marketplace.
     *
     * @param  string $marketplace marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Webhook
     */
    public function marketplacesWebhooksCreate($marketplace, $data)
    {
        list($response) = $this->marketplacesWebhooksCreateWithHttpInfo($marketplace, $data);
        return $response;
    }

    /**
     * Operation marketplacesWebhooksCreateWithHttpInfo
     *
     * Create a single webhook for the marketplace.
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesWebhooksCreateWithHttpInfo($marketplace, $data)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->marketplacesWebhooksCreateRequest($marketplace, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Webhook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesWebhooksCreateAsync
     *
     * Create a single webhook for the marketplace.
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksCreateAsync($marketplace, $data)
    {
        return $this->marketplacesWebhooksCreateAsyncWithHttpInfo($marketplace, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesWebhooksCreateAsyncWithHttpInfo
     *
     * Create a single webhook for the marketplace.
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksCreateAsyncWithHttpInfo($marketplace, $data)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->marketplacesWebhooksCreateRequest($marketplace, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesWebhooksCreate'
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesWebhooksCreateRequest($marketplace, $data)
    {
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesWebhooksCreate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling marketplacesWebhooksCreate'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesWebhooksDelete
     *
     * @param  string $event event (required)
     * @param  string $marketplace marketplace (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function marketplacesWebhooksDelete($event, $marketplace)
    {
        $this->marketplacesWebhooksDeleteWithHttpInfo($event, $marketplace);
    }

    /**
     * Operation marketplacesWebhooksDeleteWithHttpInfo
     *
     * @param  string $event (required)
     * @param  string $marketplace (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesWebhooksDeleteWithHttpInfo($event, $marketplace)
    {
        $returnType = '';
        $request = $this->marketplacesWebhooksDeleteRequest($event, $marketplace);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesWebhooksDeleteAsync
     *
     * 
     *
     * @param  string $event (required)
     * @param  string $marketplace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksDeleteAsync($event, $marketplace)
    {
        return $this->marketplacesWebhooksDeleteAsyncWithHttpInfo($event, $marketplace)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesWebhooksDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event (required)
     * @param  string $marketplace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksDeleteAsyncWithHttpInfo($event, $marketplace)
    {
        $returnType = '';
        $request = $this->marketplacesWebhooksDeleteRequest($event, $marketplace);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesWebhooksDelete'
     *
     * @param  string $event (required)
     * @param  string $marketplace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesWebhooksDeleteRequest($event, $marketplace)
    {
        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling marketplacesWebhooksDelete'
            );
        }
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesWebhooksDelete'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/webhooks/{event}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($event !== null) {
            $resourcePath = str_replace(
                '{' . 'event' . '}',
                ObjectSerializer::toPathValue($event),
                $resourcePath
            );
        }
        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesWebhooksList
     *
     * List every webhook for the marketplace, set as well as unset.
     *
     * @param  string $marketplace Marketplace unique identifier. (required)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Webhook[]
     */
    public function marketplacesWebhooksList($marketplace, $page = null)
    {
        list($response) = $this->marketplacesWebhooksListWithHttpInfo($marketplace, $page);
        return $response;
    }

    /**
     * Operation marketplacesWebhooksListWithHttpInfo
     *
     * List every webhook for the marketplace, set as well as unset.
     *
     * @param  string $marketplace Marketplace unique identifier. (required)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Webhook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesWebhooksListWithHttpInfo($marketplace, $page = null)
    {
        $returnType = '\Swagger\Client\Model\Webhook[]';
        $request = $this->marketplacesWebhooksListRequest($marketplace, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Webhook[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesWebhooksListAsync
     *
     * List every webhook for the marketplace, set as well as unset.
     *
     * @param  string $marketplace Marketplace unique identifier. (required)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksListAsync($marketplace, $page = null)
    {
        return $this->marketplacesWebhooksListAsyncWithHttpInfo($marketplace, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesWebhooksListAsyncWithHttpInfo
     *
     * List every webhook for the marketplace, set as well as unset.
     *
     * @param  string $marketplace Marketplace unique identifier. (required)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksListAsyncWithHttpInfo($marketplace, $page = null)
    {
        $returnType = '\Swagger\Client\Model\Webhook[]';
        $request = $this->marketplacesWebhooksListRequest($marketplace, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesWebhooksList'
     *
     * @param  string $marketplace Marketplace unique identifier. (required)
     * @param  int $page A page number within the paginated result set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesWebhooksListRequest($marketplace, $page = null)
    {
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesWebhooksList'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }

        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marketplacesWebhooksUpdate
     *
     * Update a single webhook for the marketplace.
     *
     * @param  string $marketplace marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Webhook
     */
    public function marketplacesWebhooksUpdate($marketplace, $data)
    {
        list($response) = $this->marketplacesWebhooksUpdateWithHttpInfo($marketplace, $data);
        return $response;
    }

    /**
     * Operation marketplacesWebhooksUpdateWithHttpInfo
     *
     * Update a single webhook for the marketplace.
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     */
    public function marketplacesWebhooksUpdateWithHttpInfo($marketplace, $data)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->marketplacesWebhooksUpdateRequest($marketplace, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Webhook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marketplacesWebhooksUpdateAsync
     *
     * Update a single webhook for the marketplace.
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksUpdateAsync($marketplace, $data)
    {
        return $this->marketplacesWebhooksUpdateAsyncWithHttpInfo($marketplace, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marketplacesWebhooksUpdateAsyncWithHttpInfo
     *
     * Update a single webhook for the marketplace.
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marketplacesWebhooksUpdateAsyncWithHttpInfo($marketplace, $data)
    {
        $returnType = '\Swagger\Client\Model\Webhook';
        $request = $this->marketplacesWebhooksUpdateRequest($marketplace, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marketplacesWebhooksUpdate'
     *
     * @param  string $marketplace (required)
     * @param  \Swagger\Client\Model\Webhook $data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function marketplacesWebhooksUpdateRequest($marketplace, $data)
    {
        // verify the required parameter 'marketplace' is set
        if ($marketplace === null || (is_array($marketplace) && count($marketplace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace when calling marketplacesWebhooksUpdate'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null || (is_array($data) && count($data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling marketplacesWebhooksUpdate'
            );
        }

        $resourcePath = '/marketplaces/{marketplace}/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($marketplace !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplace' . '}',
                ObjectSerializer::toPathValue($marketplace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
