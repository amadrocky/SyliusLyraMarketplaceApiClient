<?php
/**
 * SellersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SellersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SellersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sellersCashoutsList
     *
     * List of cashouts associated with a marketplace.
     *
     * @param  string $seller seller (required)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  string $capture_start_date Lower date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $capture_end_date Upper date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $seller2 Filter by unique seller identifier. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sellersCashoutsList($seller, $page = null, $page_size = null, $capture_start_date = null, $capture_end_date = null, $seller2 = null)
    {
        list($response) = $this->sellersCashoutsListWithHttpInfo($seller, $page, $page_size, $capture_start_date, $capture_end_date, $seller2);
        return $response;
    }

    /**
     * Operation sellersCashoutsListWithHttpInfo
     *
     * List of cashouts associated with a marketplace.
     *
     * @param  string $seller (required)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  string $capture_start_date Lower date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $capture_end_date Upper date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $seller2 Filter by unique seller identifier. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersCashoutsListWithHttpInfo($seller, $page = null, $page_size = null, $capture_start_date = null, $capture_end_date = null, $seller2 = null)
    {
        $returnType = 'object';
        $request = $this->sellersCashoutsListRequest($seller, $page, $page_size, $capture_start_date, $capture_end_date, $seller2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sellersCashoutsListAsync
     *
     * List of cashouts associated with a marketplace.
     *
     * @param  string $seller (required)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  string $capture_start_date Lower date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $capture_end_date Upper date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $seller2 Filter by unique seller identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersCashoutsListAsync($seller, $page = null, $page_size = null, $capture_start_date = null, $capture_end_date = null, $seller2 = null)
    {
        return $this->sellersCashoutsListAsyncWithHttpInfo($seller, $page, $page_size, $capture_start_date, $capture_end_date, $seller2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sellersCashoutsListAsyncWithHttpInfo
     *
     * List of cashouts associated with a marketplace.
     *
     * @param  string $seller (required)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  string $capture_start_date Lower date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $capture_end_date Upper date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $seller2 Filter by unique seller identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersCashoutsListAsyncWithHttpInfo($seller, $page = null, $page_size = null, $capture_start_date = null, $capture_end_date = null, $seller2 = null)
    {
        $returnType = 'object';
        $request = $this->sellersCashoutsListRequest($seller, $page, $page_size, $capture_start_date, $capture_end_date, $seller2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sellersCashoutsList'
     *
     * @param  string $seller (required)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  int $page_size Number of results to return per page. (optional)
     * @param  string $capture_start_date Lower date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $capture_end_date Upper date filter boundary (format YYYY-MM-DD. Eg : 2019-01-01). (optional)
     * @param  string $seller2 Filter by unique seller identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sellersCashoutsListRequest($seller, $page = null, $page_size = null, $capture_start_date = null, $capture_end_date = null, $seller2 = null)
    {
        // verify the required parameter 'seller' is set
        if ($seller === null || (is_array($seller) && count($seller) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller when calling sellersCashoutsList'
            );
        }

        $resourcePath = '/sellers/{seller}/cashouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($capture_start_date !== null) {
            $queryParams['capture_start_date'] = ObjectSerializer::toQueryValue($capture_start_date);
        }
        // query params
        if ($capture_end_date !== null) {
            $queryParams['capture_end_date'] = ObjectSerializer::toQueryValue($capture_end_date);
        }
        // query params
        if ($seller2 !== null) {
            $queryParams['seller'] = ObjectSerializer::toQueryValue($seller2);
        }

        // path params
        if ($seller !== null) {
            $resourcePath = str_replace(
                '{' . 'seller' . '}',
                ObjectSerializer::toPathValue($seller),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sellersItemsList
     *
     * List of items by order, by seller or by creation date.
     *
     * @param  string $seller seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $start_date Lower creation date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $end_date Upper create date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $uuid Select the item using the unique item identifier. (optional)
     * @param  string $seller2 Filter by seller using the unique seller identifier. (optional)
     * @param  string $order Filter by order using the Unique order identifier. (optional)
     * @param  float $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the status of the item. May be one of CREATED, PENDING, SUCCEEDED, CANCELLED, FAILED, ABANDONED (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sellersItemsList($seller, $ordering = null, $page = null, $start_date = null, $end_date = null, $uuid = null, $seller2 = null, $order = null, $amount = null, $status = null)
    {
        list($response) = $this->sellersItemsListWithHttpInfo($seller, $ordering, $page, $start_date, $end_date, $uuid, $seller2, $order, $amount, $status);
        return $response;
    }

    /**
     * Operation sellersItemsListWithHttpInfo
     *
     * List of items by order, by seller or by creation date.
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $start_date Lower creation date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $end_date Upper create date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $uuid Select the item using the unique item identifier. (optional)
     * @param  string $seller2 Filter by seller using the unique seller identifier. (optional)
     * @param  string $order Filter by order using the Unique order identifier. (optional)
     * @param  float $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the status of the item. May be one of CREATED, PENDING, SUCCEEDED, CANCELLED, FAILED, ABANDONED (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersItemsListWithHttpInfo($seller, $ordering = null, $page = null, $start_date = null, $end_date = null, $uuid = null, $seller2 = null, $order = null, $amount = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->sellersItemsListRequest($seller, $ordering, $page, $start_date, $end_date, $uuid, $seller2, $order, $amount, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sellersItemsListAsync
     *
     * List of items by order, by seller or by creation date.
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $start_date Lower creation date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $end_date Upper create date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $uuid Select the item using the unique item identifier. (optional)
     * @param  string $seller2 Filter by seller using the unique seller identifier. (optional)
     * @param  string $order Filter by order using the Unique order identifier. (optional)
     * @param  float $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the status of the item. May be one of CREATED, PENDING, SUCCEEDED, CANCELLED, FAILED, ABANDONED (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersItemsListAsync($seller, $ordering = null, $page = null, $start_date = null, $end_date = null, $uuid = null, $seller2 = null, $order = null, $amount = null, $status = null)
    {
        return $this->sellersItemsListAsyncWithHttpInfo($seller, $ordering, $page, $start_date, $end_date, $uuid, $seller2, $order, $amount, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sellersItemsListAsyncWithHttpInfo
     *
     * List of items by order, by seller or by creation date.
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $start_date Lower creation date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $end_date Upper create date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $uuid Select the item using the unique item identifier. (optional)
     * @param  string $seller2 Filter by seller using the unique seller identifier. (optional)
     * @param  string $order Filter by order using the Unique order identifier. (optional)
     * @param  float $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the status of the item. May be one of CREATED, PENDING, SUCCEEDED, CANCELLED, FAILED, ABANDONED (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersItemsListAsyncWithHttpInfo($seller, $ordering = null, $page = null, $start_date = null, $end_date = null, $uuid = null, $seller2 = null, $order = null, $amount = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->sellersItemsListRequest($seller, $ordering, $page, $start_date, $end_date, $uuid, $seller2, $order, $amount, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sellersItemsList'
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $start_date Lower creation date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $end_date Upper create date and time boundary, in format YYYY-MM-DD HH:MM. (optional)
     * @param  string $uuid Select the item using the unique item identifier. (optional)
     * @param  string $seller2 Filter by seller using the unique seller identifier. (optional)
     * @param  string $order Filter by order using the Unique order identifier. (optional)
     * @param  float $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the status of the item. May be one of CREATED, PENDING, SUCCEEDED, CANCELLED, FAILED, ABANDONED (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sellersItemsListRequest($seller, $ordering = null, $page = null, $start_date = null, $end_date = null, $uuid = null, $seller2 = null, $order = null, $amount = null, $status = null)
    {
        // verify the required parameter 'seller' is set
        if ($seller === null || (is_array($seller) && count($seller) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller when calling sellersItemsList'
            );
        }

        $resourcePath = '/sellers/{seller}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }
        // query params
        if ($seller2 !== null) {
            $queryParams['seller'] = ObjectSerializer::toQueryValue($seller2);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($seller !== null) {
            $resourcePath = str_replace(
                '{' . 'seller' . '}',
                ObjectSerializer::toPathValue($seller),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sellersList
     *
     * List of sellers by marketplace.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sellersList($ordering = null, $page = null, $uuid = null, $status = null)
    {
        list($response) = $this->sellersListWithHttpInfo($ordering, $page, $uuid, $status);
        return $response;
    }

    /**
     * Operation sellersListWithHttpInfo
     *
     * List of sellers by marketplace.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersListWithHttpInfo($ordering = null, $page = null, $uuid = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->sellersListRequest($ordering, $page, $uuid, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sellersListAsync
     *
     * List of sellers by marketplace.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersListAsync($ordering = null, $page = null, $uuid = null, $status = null)
    {
        return $this->sellersListAsyncWithHttpInfo($ordering, $page, $uuid, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sellersListAsyncWithHttpInfo
     *
     * List of sellers by marketplace.
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersListAsyncWithHttpInfo($ordering = null, $page = null, $uuid = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->sellersListRequest($ordering, $page, $uuid, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sellersList'
     *
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the seller using the unique seller identifier. (optional)
     * @param  string $status Filter by current status of the seller (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sellersListRequest($ordering = null, $page = null, $uuid = null, $status = null)
    {

        $resourcePath = '/sellers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sellersRead
     *
     * Retrieves the details of a single seller.
     *
     * @param  string $uuid Unique seller identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Seller
     */
    public function sellersRead($uuid)
    {
        list($response) = $this->sellersReadWithHttpInfo($uuid);
        return $response;
    }

    /**
     * Operation sellersReadWithHttpInfo
     *
     * Retrieves the details of a single seller.
     *
     * @param  string $uuid Unique seller identifier. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Seller, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersReadWithHttpInfo($uuid)
    {
        $returnType = '\Swagger\Client\Model\Seller';
        $request = $this->sellersReadRequest($uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Seller',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sellersReadAsync
     *
     * Retrieves the details of a single seller.
     *
     * @param  string $uuid Unique seller identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersReadAsync($uuid)
    {
        return $this->sellersReadAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sellersReadAsyncWithHttpInfo
     *
     * Retrieves the details of a single seller.
     *
     * @param  string $uuid Unique seller identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersReadAsyncWithHttpInfo($uuid)
    {
        $returnType = '\Swagger\Client\Model\Seller';
        $request = $this->sellersReadRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sellersRead'
     *
     * @param  string $uuid Unique seller identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sellersReadRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling sellersRead'
            );
        }

        $resourcePath = '/sellers/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sellersTransfersList
     *
     * List of transfers by order, by seller, by item, by transaction or by creation date.
     *
     * @param  string $seller seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the transfer using the transfer unique identifier (optional)
     * @param  string $item Filter by item using the unique item identifier. (optional)
     * @param  string $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the current status of the item. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sellersTransfersList($seller, $ordering = null, $page = null, $uuid = null, $item = null, $amount = null, $status = null)
    {
        list($response) = $this->sellersTransfersListWithHttpInfo($seller, $ordering, $page, $uuid, $item, $amount, $status);
        return $response;
    }

    /**
     * Operation sellersTransfersListWithHttpInfo
     *
     * List of transfers by order, by seller, by item, by transaction or by creation date.
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the transfer using the transfer unique identifier (optional)
     * @param  string $item Filter by item using the unique item identifier. (optional)
     * @param  string $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the current status of the item. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersTransfersListWithHttpInfo($seller, $ordering = null, $page = null, $uuid = null, $item = null, $amount = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->sellersTransfersListRequest($seller, $ordering, $page, $uuid, $item, $amount, $status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sellersTransfersListAsync
     *
     * List of transfers by order, by seller, by item, by transaction or by creation date.
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the transfer using the transfer unique identifier (optional)
     * @param  string $item Filter by item using the unique item identifier. (optional)
     * @param  string $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the current status of the item. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersTransfersListAsync($seller, $ordering = null, $page = null, $uuid = null, $item = null, $amount = null, $status = null)
    {
        return $this->sellersTransfersListAsyncWithHttpInfo($seller, $ordering, $page, $uuid, $item, $amount, $status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sellersTransfersListAsyncWithHttpInfo
     *
     * List of transfers by order, by seller, by item, by transaction or by creation date.
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the transfer using the transfer unique identifier (optional)
     * @param  string $item Filter by item using the unique item identifier. (optional)
     * @param  string $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the current status of the item. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sellersTransfersListAsyncWithHttpInfo($seller, $ordering = null, $page = null, $uuid = null, $item = null, $amount = null, $status = null)
    {
        $returnType = 'object';
        $request = $this->sellersTransfersListRequest($seller, $ordering, $page, $uuid, $item, $amount, $status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sellersTransfersList'
     *
     * @param  string $seller (required)
     * @param  string $ordering Which field to use when ordering the results. (optional)
     * @param  int $page A page number within the paginated result set. (optional)
     * @param  string $uuid Select the transfer using the transfer unique identifier (optional)
     * @param  string $item Filter by item using the unique item identifier. (optional)
     * @param  string $amount Filter by amount of the item. (optional)
     * @param  string $status Filter by the current status of the item. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sellersTransfersListRequest($seller, $ordering = null, $page = null, $uuid = null, $item = null, $amount = null, $status = null)
    {
        // verify the required parameter 'seller' is set
        if ($seller === null || (is_array($seller) && count($seller) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $seller when calling sellersTransfersList'
            );
        }

        $resourcePath = '/sellers/{seller}/transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($uuid !== null) {
            $queryParams['uuid'] = ObjectSerializer::toQueryValue($uuid);
        }
        // query params
        if ($item !== null) {
            $queryParams['item'] = ObjectSerializer::toQueryValue($item);
        }
        // query params
        if ($amount !== null) {
            $queryParams['amount'] = ObjectSerializer::toQueryValue($amount);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }

        // path params
        if ($seller !== null) {
            $resourcePath = str_replace(
                '{' . 'seller' . '}',
                ObjectSerializer::toPathValue($seller),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
