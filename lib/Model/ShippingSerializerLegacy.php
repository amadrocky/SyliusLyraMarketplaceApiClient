<?php
/**
 * ShippingSerializerLegacy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShippingSerializerLegacy Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingSerializerLegacy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingSerializerLegacy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_method' => 'string',
        'delivery_company_name' => 'string',
        'shipping_speed' => 'string',
        'shipping_delay' => 'string',
        'type' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'legal_name' => 'string',
        'phone_number' => 'string',
        'address' => '\Swagger\Client\Model\Address'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_method' => null,
        'delivery_company_name' => null,
        'shipping_speed' => null,
        'shipping_delay' => null,
        'type' => null,
        'first_name' => null,
        'last_name' => null,
        'legal_name' => null,
        'phone_number' => null,
        'address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_method' => 'shipping_method',
        'delivery_company_name' => 'delivery_company_name',
        'shipping_speed' => 'shipping_speed',
        'shipping_delay' => 'shipping_delay',
        'type' => 'type',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'legal_name' => 'legal_name',
        'phone_number' => 'phone_number',
        'address' => 'address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_method' => 'setShippingMethod',
        'delivery_company_name' => 'setDeliveryCompanyName',
        'shipping_speed' => 'setShippingSpeed',
        'shipping_delay' => 'setShippingDelay',
        'type' => 'setType',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'legal_name' => 'setLegalName',
        'phone_number' => 'setPhoneNumber',
        'address' => 'setAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_method' => 'getShippingMethod',
        'delivery_company_name' => 'getDeliveryCompanyName',
        'shipping_speed' => 'getShippingSpeed',
        'shipping_delay' => 'getShippingDelay',
        'type' => 'getType',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'legal_name' => 'getLegalName',
        'phone_number' => 'getPhoneNumber',
        'address' => 'getAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIPPING_METHOD_RECLAIM_IN_SHOP = 'RECLAIM_IN_SHOP';
    const SHIPPING_METHOD_RELAY_POINT = 'RELAY_POINT';
    const SHIPPING_METHOD_RECLAIM_IN_STATION = 'RECLAIM_IN_STATION';
    const SHIPPING_METHOD_PACKAGE_DELIVERY_COMPANY = 'PACKAGE_DELIVERY_COMPANY';
    const SHIPPING_METHOD_ETICKET = 'ETICKET';
    const SHIPPING_SPEED_STANDARD = 'STANDARD';
    const SHIPPING_SPEED_EXPRESS = 'EXPRESS';
    const SHIPPING_SPEED_PRIORITY = 'PRIORITY';
    const SHIPPING_DELAY_INFERIOR_EQUALS = 'INFERIOR_EQUALS';
    const SHIPPING_DELAY_SUPERIOR = 'SUPERIOR';
    const SHIPPING_DELAY_IMMEDIATE = 'IMMEDIATE';
    const SHIPPING_DELAY_ALWAYS = 'ALWAYS';
    const TYPE__PRIVATE = 'PRIVATE';
    const TYPE_COMPANY = 'COMPANY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingMethodAllowableValues()
    {
        return [
            self::SHIPPING_METHOD_RECLAIM_IN_SHOP,
            self::SHIPPING_METHOD_RELAY_POINT,
            self::SHIPPING_METHOD_RECLAIM_IN_STATION,
            self::SHIPPING_METHOD_PACKAGE_DELIVERY_COMPANY,
            self::SHIPPING_METHOD_ETICKET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingSpeedAllowableValues()
    {
        return [
            self::SHIPPING_SPEED_STANDARD,
            self::SHIPPING_SPEED_EXPRESS,
            self::SHIPPING_SPEED_PRIORITY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingDelayAllowableValues()
    {
        return [
            self::SHIPPING_DELAY_INFERIOR_EQUALS,
            self::SHIPPING_DELAY_SUPERIOR,
            self::SHIPPING_DELAY_IMMEDIATE,
            self::SHIPPING_DELAY_ALWAYS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE__PRIVATE,
            self::TYPE_COMPANY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['delivery_company_name'] = isset($data['delivery_company_name']) ? $data['delivery_company_name'] : null;
        $this->container['shipping_speed'] = isset($data['shipping_speed']) ? $data['shipping_speed'] : null;
        $this->container['shipping_delay'] = isset($data['shipping_delay']) ? $data['shipping_delay'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['legal_name'] = isset($data['legal_name']) ? $data['legal_name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipping_method'] === null) {
            $invalidProperties[] = "'shipping_method' can't be null";
        }
        $allowedValues = $this->getShippingMethodAllowableValues();
        if (!is_null($this->container['shipping_method']) && !in_array($this->container['shipping_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipping_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['delivery_company_name']) && (mb_strlen($this->container['delivery_company_name']) > 127)) {
            $invalidProperties[] = "invalid value for 'delivery_company_name', the character length must be smaller than or equal to 127.";
        }

        $allowedValues = $this->getShippingSpeedAllowableValues();
        if (!is_null($this->container['shipping_speed']) && !in_array($this->container['shipping_speed'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipping_speed', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShippingDelayAllowableValues();
        if (!is_null($this->container['shipping_delay']) && !in_array($this->container['shipping_delay'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipping_delay', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['legal_name']) && (mb_strlen($this->container['legal_name']) > 127)) {
            $invalidProperties[] = "invalid value for 'legal_name', the character length must be smaller than or equal to 127.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) > 32)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_method
     *
     * @return string
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string $shipping_method shipping_method
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $allowedValues = $this->getShippingMethodAllowableValues();
        if (!in_array($shipping_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipping_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets delivery_company_name
     *
     * @return string
     */
    public function getDeliveryCompanyName()
    {
        return $this->container['delivery_company_name'];
    }

    /**
     * Sets delivery_company_name
     *
     * @param string $delivery_company_name delivery_company_name
     *
     * @return $this
     */
    public function setDeliveryCompanyName($delivery_company_name)
    {
        if (!is_null($delivery_company_name) && (mb_strlen($delivery_company_name) > 127)) {
            throw new \InvalidArgumentException('invalid length for $delivery_company_name when calling ShippingSerializerLegacy., must be smaller than or equal to 127.');
        }

        $this->container['delivery_company_name'] = $delivery_company_name;

        return $this;
    }

    /**
     * Gets shipping_speed
     *
     * @return string
     */
    public function getShippingSpeed()
    {
        return $this->container['shipping_speed'];
    }

    /**
     * Sets shipping_speed
     *
     * @param string $shipping_speed shipping_speed
     *
     * @return $this
     */
    public function setShippingSpeed($shipping_speed)
    {
        $allowedValues = $this->getShippingSpeedAllowableValues();
        if (!is_null($shipping_speed) && !in_array($shipping_speed, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipping_speed', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_speed'] = $shipping_speed;

        return $this;
    }

    /**
     * Gets shipping_delay
     *
     * @return string
     */
    public function getShippingDelay()
    {
        return $this->container['shipping_delay'];
    }

    /**
     * Sets shipping_delay
     *
     * @param string $shipping_delay shipping_delay
     *
     * @return $this
     */
    public function setShippingDelay($shipping_delay)
    {
        $allowedValues = $this->getShippingDelayAllowableValues();
        if (!is_null($shipping_delay) && !in_array($shipping_delay, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipping_delay', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_delay'] = $shipping_delay;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling ShippingSerializerLegacy., must be smaller than or equal to 63.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling ShippingSerializerLegacy., must be smaller than or equal to 63.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string $legal_name legal_name
     *
     * @return $this
     */
    public function setLegalName($legal_name)
    {
        if (!is_null($legal_name) && (mb_strlen($legal_name) > 127)) {
            throw new \InvalidArgumentException('invalid length for $legal_name when calling ShippingSerializerLegacy., must be smaller than or equal to 127.');
        }

        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (!is_null($phone_number) && (mb_strlen($phone_number) > 32)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling ShippingSerializerLegacy., must be smaller than or equal to 32.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


