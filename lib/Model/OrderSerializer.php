<?php
/**
 * OrderSerializer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderSerializer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderSerializer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderSerializer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'href' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'marketplace' => 'string',
        'reference' => 'string',
        'description' => 'string',
        'language' => 'string',
        'alias' => 'string',
        'awaiting_validation' => 'bool',
        'buyer' => '\Swagger\Client\Model\BuyerSerializerLegacy',
        'shipping' => '\Swagger\Client\Model\ShippingSerializerLegacy',
        'payment_config' => 'string',
        'amount' => 'int',
        'initial_amount' => 'int',
        'currency' => 'string',
        'status' => 'string',
        'webhook_result' => 'int',
        'url_return' => 'string',
        'url_success' => 'string',
        'url_refused' => 'string',
        'url_cancel' => 'string',
        'url_error' => 'string',
        'return_mode' => 'string',
        'shop_url' => 'string',
        'links' => '\Swagger\Client\Model\OrderLinks',
        'vads_transaction_id' => 'string',
        'vads_transaction_date' => 'string',
        'expected_capture_date' => 'string',
        'capture_delay' => 'int',
        'persist_url' => 'string',
        'expiry_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'href' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'marketplace' => null,
        'reference' => null,
        'description' => null,
        'language' => null,
        'alias' => null,
        'awaiting_validation' => null,
        'buyer' => null,
        'shipping' => null,
        'payment_config' => null,
        'amount' => null,
        'initial_amount' => null,
        'currency' => null,
        'status' => null,
        'webhook_result' => null,
        'url_return' => 'uri',
        'url_success' => 'uri',
        'url_refused' => 'uri',
        'url_cancel' => 'uri',
        'url_error' => 'uri',
        'return_mode' => null,
        'shop_url' => 'uri',
        'links' => null,
        'vads_transaction_id' => null,
        'vads_transaction_date' => null,
        'expected_capture_date' => null,
        'capture_delay' => null,
        'persist_url' => null,
        'expiry_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'href' => 'href',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'marketplace' => 'marketplace',
        'reference' => 'reference',
        'description' => 'description',
        'language' => 'language',
        'alias' => 'alias',
        'awaiting_validation' => 'awaiting_validation',
        'buyer' => 'buyer',
        'shipping' => 'shipping',
        'payment_config' => 'payment_config',
        'amount' => 'amount',
        'initial_amount' => 'initial_amount',
        'currency' => 'currency',
        'status' => 'status',
        'webhook_result' => 'webhook_result',
        'url_return' => 'url_return',
        'url_success' => 'url_success',
        'url_refused' => 'url_refused',
        'url_cancel' => 'url_cancel',
        'url_error' => 'url_error',
        'return_mode' => 'return_mode',
        'shop_url' => 'shop_url',
        'links' => 'links',
        'vads_transaction_id' => 'vads_transaction_id',
        'vads_transaction_date' => 'vads_transaction_date',
        'expected_capture_date' => 'expected_capture_date',
        'capture_delay' => 'capture_delay',
        'persist_url' => 'persist_url',
        'expiry_date' => 'expiry_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'href' => 'setHref',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'marketplace' => 'setMarketplace',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'language' => 'setLanguage',
        'alias' => 'setAlias',
        'awaiting_validation' => 'setAwaitingValidation',
        'buyer' => 'setBuyer',
        'shipping' => 'setShipping',
        'payment_config' => 'setPaymentConfig',
        'amount' => 'setAmount',
        'initial_amount' => 'setInitialAmount',
        'currency' => 'setCurrency',
        'status' => 'setStatus',
        'webhook_result' => 'setWebhookResult',
        'url_return' => 'setUrlReturn',
        'url_success' => 'setUrlSuccess',
        'url_refused' => 'setUrlRefused',
        'url_cancel' => 'setUrlCancel',
        'url_error' => 'setUrlError',
        'return_mode' => 'setReturnMode',
        'shop_url' => 'setShopUrl',
        'links' => 'setLinks',
        'vads_transaction_id' => 'setVadsTransactionId',
        'vads_transaction_date' => 'setVadsTransactionDate',
        'expected_capture_date' => 'setExpectedCaptureDate',
        'capture_delay' => 'setCaptureDelay',
        'persist_url' => 'setPersistUrl',
        'expiry_date' => 'setExpiryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'href' => 'getHref',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'marketplace' => 'getMarketplace',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'language' => 'getLanguage',
        'alias' => 'getAlias',
        'awaiting_validation' => 'getAwaitingValidation',
        'buyer' => 'getBuyer',
        'shipping' => 'getShipping',
        'payment_config' => 'getPaymentConfig',
        'amount' => 'getAmount',
        'initial_amount' => 'getInitialAmount',
        'currency' => 'getCurrency',
        'status' => 'getStatus',
        'webhook_result' => 'getWebhookResult',
        'url_return' => 'getUrlReturn',
        'url_success' => 'getUrlSuccess',
        'url_refused' => 'getUrlRefused',
        'url_cancel' => 'getUrlCancel',
        'url_error' => 'getUrlError',
        'return_mode' => 'getReturnMode',
        'shop_url' => 'getShopUrl',
        'links' => 'getLinks',
        'vads_transaction_id' => 'getVadsTransactionId',
        'vads_transaction_date' => 'getVadsTransactionDate',
        'expected_capture_date' => 'getExpectedCaptureDate',
        'capture_delay' => 'getCaptureDelay',
        'persist_url' => 'getPersistUrl',
        'expiry_date' => 'getExpiryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANGUAGE_DE = 'de';
    const LANGUAGE_EN = 'en';
    const LANGUAGE_ES = 'es';
    const LANGUAGE_FR = 'fr';
    const LANGUAGE_IT = 'it';
    const LANGUAGE_JA = 'ja';
    const LANGUAGE_NL = 'nl';
    const LANGUAGE_PL = 'pl';
    const LANGUAGE_PT = 'pt';
    const LANGUAGE_RU = 'ru';
    const LANGUAGE_SV = 'sv';
    const LANGUAGE_TR = 'tr';
    const LANGUAGE_ZH = 'zh';
    const STATUS_CREATED = 'CREATED';
    const STATUS_PENDING = 'PENDING';
    const STATUS_SUCCEEDED = 'SUCCEEDED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_FAILED = 'FAILED';
    const STATUS_ABANDONED = 'ABANDONED';
    const RETURN_MODE_GET = 'GET';
    const RETURN_MODE_POST = 'POST';
    const RETURN_MODE_NONE = 'NONE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_DE,
            self::LANGUAGE_EN,
            self::LANGUAGE_ES,
            self::LANGUAGE_FR,
            self::LANGUAGE_IT,
            self::LANGUAGE_JA,
            self::LANGUAGE_NL,
            self::LANGUAGE_PL,
            self::LANGUAGE_PT,
            self::LANGUAGE_RU,
            self::LANGUAGE_SV,
            self::LANGUAGE_TR,
            self::LANGUAGE_ZH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PENDING,
            self::STATUS_SUCCEEDED,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_ABANDONED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReturnModeAllowableValues()
    {
        return [
            self::RETURN_MODE_GET,
            self::RETURN_MODE_POST,
            self::RETURN_MODE_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['marketplace'] = isset($data['marketplace']) ? $data['marketplace'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['awaiting_validation'] = isset($data['awaiting_validation']) ? $data['awaiting_validation'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['payment_config'] = isset($data['payment_config']) ? $data['payment_config'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['initial_amount'] = isset($data['initial_amount']) ? $data['initial_amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['webhook_result'] = isset($data['webhook_result']) ? $data['webhook_result'] : null;
        $this->container['url_return'] = isset($data['url_return']) ? $data['url_return'] : null;
        $this->container['url_success'] = isset($data['url_success']) ? $data['url_success'] : null;
        $this->container['url_refused'] = isset($data['url_refused']) ? $data['url_refused'] : null;
        $this->container['url_cancel'] = isset($data['url_cancel']) ? $data['url_cancel'] : null;
        $this->container['url_error'] = isset($data['url_error']) ? $data['url_error'] : null;
        $this->container['return_mode'] = isset($data['return_mode']) ? $data['return_mode'] : null;
        $this->container['shop_url'] = isset($data['shop_url']) ? $data['shop_url'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['vads_transaction_id'] = isset($data['vads_transaction_id']) ? $data['vads_transaction_id'] : null;
        $this->container['vads_transaction_date'] = isset($data['vads_transaction_date']) ? $data['vads_transaction_date'] : null;
        $this->container['expected_capture_date'] = isset($data['expected_capture_date']) ? $data['expected_capture_date'] : null;
        $this->container['capture_delay'] = isset($data['capture_delay']) ? $data['capture_delay'] : null;
        $this->container['persist_url'] = isset($data['persist_url']) ? $data['persist_url'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['marketplace'] === null) {
            $invalidProperties[] = "'marketplace' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ((mb_strlen($this->container['reference']) > 32)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9_ \\-]+$/", $this->container['reference'])) {
            $invalidProperties[] = "invalid value for 'reference', must be conform to the pattern /^[a-zA-Z0-9_ \\-]+$/.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['alias']) && (mb_strlen($this->container['alias']) > 50)) {
            $invalidProperties[] = "invalid value for 'alias', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['buyer'] === null) {
            $invalidProperties[] = "'buyer' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['url_return']) && (mb_strlen($this->container['url_return']) > 512)) {
            $invalidProperties[] = "invalid value for 'url_return', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['url_success']) && (mb_strlen($this->container['url_success']) > 200)) {
            $invalidProperties[] = "invalid value for 'url_success', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['url_refused']) && (mb_strlen($this->container['url_refused']) > 200)) {
            $invalidProperties[] = "invalid value for 'url_refused', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['url_cancel']) && (mb_strlen($this->container['url_cancel']) > 200)) {
            $invalidProperties[] = "invalid value for 'url_cancel', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['url_error']) && (mb_strlen($this->container['url_error']) > 200)) {
            $invalidProperties[] = "invalid value for 'url_error', the character length must be smaller than or equal to 200.";
        }

        $allowedValues = $this->getReturnModeAllowableValues();
        if (!is_null($this->container['return_mode']) && !in_array($this->container['return_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'return_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shop_url']) && (mb_strlen($this->container['shop_url']) > 200)) {
            $invalidProperties[] = "invalid value for 'shop_url', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['expected_capture_date']) && (mb_strlen($this->container['expected_capture_date']) > 14)) {
            $invalidProperties[] = "invalid value for 'expected_capture_date', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['expected_capture_date']) && !preg_match("/^[\\d]{14}$/", $this->container['expected_capture_date'])) {
            $invalidProperties[] = "invalid value for 'expected_capture_date', must be conform to the pattern /^[\\d]{14}$/.";
        }

        if (!is_null($this->container['capture_delay']) && ($this->container['capture_delay'] > 90)) {
            $invalidProperties[] = "invalid value for 'capture_delay', must be smaller than or equal to 90.";
        }

        if (!is_null($this->container['capture_delay']) && ($this->container['capture_delay'] < 0)) {
            $invalidProperties[] = "invalid value for 'capture_delay', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Unique identifier. This field is automatically generated.
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling OrderSerializer., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date. This field is automatically generated.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date of the last modification. This field is automatically generated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return string
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param string $marketplace Unique identifier (uuid) of the related marketplace.
     *
     * @return $this
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Marketplace reference of the order. Its uniqueness is enforced when using use the embedded form, and is in any case recommended.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if ((mb_strlen($reference) > 32)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling OrderSerializer., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling OrderSerializer., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_ \\-]+$/", $reference))) {
            throw new \InvalidArgumentException("invalid value for $reference when calling OrderSerializer., must conform to the pattern /^[a-zA-Z0-9_ \\-]+$/.");
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Marketplace description of the order.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling OrderSerializer., must be smaller than or equal to 255.');
        }
        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling OrderSerializer., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language If no language is defined, the payment page will be displayed according to the user's browser default settings.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias This field can be used to define the alias in case of a one or zero-clic (MIT) payment.
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        if (!is_null($alias) && (mb_strlen($alias) > 50)) {
            throw new \InvalidArgumentException('invalid length for $alias when calling OrderSerializer., must be smaller than or equal to 50.');
        }

        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets awaiting_validation
     *
     * @return bool
     */
    public function getAwaitingValidation()
    {
        return $this->container['awaiting_validation'];
    }

    /**
     * Sets awaiting_validation
     *
     * @param bool $awaiting_validation Creates a payment with manual validation.
     *
     * @return $this
     */
    public function setAwaitingValidation($awaiting_validation)
    {
        $this->container['awaiting_validation'] = $awaiting_validation;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Swagger\Client\Model\BuyerSerializerLegacy
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Swagger\Client\Model\BuyerSerializerLegacy $buyer buyer
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets shipping
     *
     * @return \Swagger\Client\Model\ShippingSerializerLegacy
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     *
     * @param \Swagger\Client\Model\ShippingSerializerLegacy $shipping shipping
     *
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets payment_config
     *
     * @return string
     */
    public function getPaymentConfig()
    {
        return $this->container['payment_config'];
    }

    /**
     * Sets payment_config
     *
     * @param string $payment_config Determine if the payment is spread on several transactions. Default is SINGLE.
     *
     * @return $this
     */
    public function setPaymentConfig($payment_config)
    {
        $this->container['payment_config'] = $payment_config;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Total amount of the order, i.e. sum of the amounts of its items.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets initial_amount
     *
     * @return int
     */
    public function getInitialAmount()
    {
        return $this->container['initial_amount'];
    }

    /**
     * Sets initial_amount
     *
     * @param int $initial_amount Total order amount when executed. Updated amounts cannot exceed it.
     *
     * @return $this
     */
    public function setInitialAmount($initial_amount)
    {
        $this->container['initial_amount'] = $initial_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Current status of the marketplace.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets webhook_result
     *
     * @return int
     */
    public function getWebhookResult()
    {
        return $this->container['webhook_result'];
    }

    /**
     * Sets webhook_result
     *
     * @param int $webhook_result Status code of the marketplace notification.
     *
     * @return $this
     */
    public function setWebhookResult($webhook_result)
    {
        $this->container['webhook_result'] = $webhook_result;

        return $this;
    }

    /**
     * Gets url_return
     *
     * @return string
     */
    public function getUrlReturn()
    {
        return $this->container['url_return'];
    }

    /**
     * Sets url_return
     *
     * @param string $url_return Default URL to which the customer is redirected after the payment process.
     *
     * @return $this
     */
    public function setUrlReturn($url_return)
    {
        if (!is_null($url_return) && (mb_strlen($url_return) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url_return when calling OrderSerializer., must be smaller than or equal to 512.');
        }

        $this->container['url_return'] = $url_return;

        return $this;
    }

    /**
     * Gets url_success
     *
     * @return string
     */
    public function getUrlSuccess()
    {
        return $this->container['url_success'];
    }

    /**
     * Sets url_success
     *
     * @param string $url_success URL to which the customer is redirected after the payment process if it was successful.
     *
     * @return $this
     */
    public function setUrlSuccess($url_success)
    {
        if (!is_null($url_success) && (mb_strlen($url_success) > 200)) {
            throw new \InvalidArgumentException('invalid length for $url_success when calling OrderSerializer., must be smaller than or equal to 200.');
        }

        $this->container['url_success'] = $url_success;

        return $this;
    }

    /**
     * Gets url_refused
     *
     * @return string
     */
    public function getUrlRefused()
    {
        return $this->container['url_refused'];
    }

    /**
     * Sets url_refused
     *
     * @param string $url_refused URL to which the customer is redirected after the payment process if it was refused.
     *
     * @return $this
     */
    public function setUrlRefused($url_refused)
    {
        if (!is_null($url_refused) && (mb_strlen($url_refused) > 200)) {
            throw new \InvalidArgumentException('invalid length for $url_refused when calling OrderSerializer., must be smaller than or equal to 200.');
        }

        $this->container['url_refused'] = $url_refused;

        return $this;
    }

    /**
     * Gets url_cancel
     *
     * @return string
     */
    public function getUrlCancel()
    {
        return $this->container['url_cancel'];
    }

    /**
     * Sets url_cancel
     *
     * @param string $url_cancel URL to which the customer is redirected after the payment process if it was cancelled.
     *
     * @return $this
     */
    public function setUrlCancel($url_cancel)
    {
        if (!is_null($url_cancel) && (mb_strlen($url_cancel) > 200)) {
            throw new \InvalidArgumentException('invalid length for $url_cancel when calling OrderSerializer., must be smaller than or equal to 200.');
        }

        $this->container['url_cancel'] = $url_cancel;

        return $this;
    }

    /**
     * Gets url_error
     *
     * @return string
     */
    public function getUrlError()
    {
        return $this->container['url_error'];
    }

    /**
     * Sets url_error
     *
     * @param string $url_error URL to which the customer is redirected after the payment process if it was in error.
     *
     * @return $this
     */
    public function setUrlError($url_error)
    {
        if (!is_null($url_error) && (mb_strlen($url_error) > 200)) {
            throw new \InvalidArgumentException('invalid length for $url_error when calling OrderSerializer., must be smaller than or equal to 200.');
        }

        $this->container['url_error'] = $url_error;

        return $this;
    }

    /**
     * Gets return_mode
     *
     * @return string
     */
    public function getReturnMode()
    {
        return $this->container['return_mode'];
    }

    /**
     * Sets return_mode
     *
     * @param string $return_mode Data transmission method used for the return URL.
     *
     * @return $this
     */
    public function setReturnMode($return_mode)
    {
        $allowedValues = $this->getReturnModeAllowableValues();
        if (!is_null($return_mode) && !in_array($return_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'return_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['return_mode'] = $return_mode;

        return $this;
    }

    /**
     * Gets shop_url
     *
     * @return string
     */
    public function getShopUrl()
    {
        return $this->container['shop_url'];
    }

    /**
     * Sets shop_url
     *
     * @param string $shop_url Overrides the shop url field set at the marketplace level.
     *
     * @return $this
     */
    public function setShopUrl($shop_url)
    {
        if (!is_null($shop_url) && (mb_strlen($shop_url) > 200)) {
            throw new \InvalidArgumentException('invalid length for $shop_url when calling OrderSerializer., must be smaller than or equal to 200.');
        }

        $this->container['shop_url'] = $shop_url;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\OrderLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\OrderLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets vads_transaction_id
     *
     * @return string
     */
    public function getVadsTransactionId()
    {
        return $this->container['vads_transaction_id'];
    }

    /**
     * Sets vads_transaction_id
     *
     * @param string $vads_transaction_id vads_transaction_id
     *
     * @return $this
     */
    public function setVadsTransactionId($vads_transaction_id)
    {
        $this->container['vads_transaction_id'] = $vads_transaction_id;

        return $this;
    }

    /**
     * Gets vads_transaction_date
     *
     * @return string
     */
    public function getVadsTransactionDate()
    {
        return $this->container['vads_transaction_date'];
    }

    /**
     * Sets vads_transaction_date
     *
     * @param string $vads_transaction_date vads_transaction_date
     *
     * @return $this
     */
    public function setVadsTransactionDate($vads_transaction_date)
    {
        $this->container['vads_transaction_date'] = $vads_transaction_date;

        return $this;
    }

    /**
     * Gets expected_capture_date
     *
     * @return string
     */
    public function getExpectedCaptureDate()
    {
        return $this->container['expected_capture_date'];
    }

    /**
     * Sets expected_capture_date
     *
     * @param string $expected_capture_date The expected capture may be used to adjust the capture date after the payment.
     *
     * @return $this
     */
    public function setExpectedCaptureDate($expected_capture_date)
    {
        if (!is_null($expected_capture_date) && (mb_strlen($expected_capture_date) > 14)) {
            throw new \InvalidArgumentException('invalid length for $expected_capture_date when calling OrderSerializer., must be smaller than or equal to 14.');
        }
        if (!is_null($expected_capture_date) && (!preg_match("/^[\\d]{14}$/", $expected_capture_date))) {
            throw new \InvalidArgumentException("invalid value for $expected_capture_date when calling OrderSerializer., must conform to the pattern /^[\\d]{14}$/.");
        }

        $this->container['expected_capture_date'] = $expected_capture_date;

        return $this;
    }

    /**
     * Gets capture_delay
     *
     * @return int
     */
    public function getCaptureDelay()
    {
        return $this->container['capture_delay'];
    }

    /**
     * Sets capture_delay
     *
     * @param int $capture_delay Number of days between the payment and the capture. Can only be set before the payment. After the payment, the capture delay should be updating using expected_capture_date. The maximum value is defined at the marketplace level (see max_capture_delay, default is 6 days).
     *
     * @return $this
     */
    public function setCaptureDelay($capture_delay)
    {

        if (!is_null($capture_delay) && ($capture_delay > 90)) {
            throw new \InvalidArgumentException('invalid value for $capture_delay when calling OrderSerializer., must be smaller than or equal to 90.');
        }
        if (!is_null($capture_delay) && ($capture_delay < 0)) {
            throw new \InvalidArgumentException('invalid value for $capture_delay when calling OrderSerializer., must be bigger than or equal to 0.');
        }

        $this->container['capture_delay'] = $capture_delay;

        return $this;
    }

    /**
     * Gets persist_url
     *
     * @return string
     */
    public function getPersistUrl()
    {
        return $this->container['persist_url'];
    }

    /**
     * Sets persist_url
     *
     * @param string $persist_url Persistent payment link, if applicable.
     *
     * @return $this
     */
    public function setPersistUrl($persist_url)
    {
        $this->container['persist_url'] = $persist_url;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date Represents the expiry date of the persist token, if exists.
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


