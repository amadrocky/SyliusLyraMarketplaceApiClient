<?php
/**
 * MarketplaceCurrency
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MarketplaceCurrency Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MarketplaceCurrency implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MarketplaceCurrency';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => 'string',
        'commission_prorata' => 'float',
        'commission_fix' => 'int',
        'is_active' => 'string',
        'cashout_frequency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
        'commission_prorata' => null,
        'commission_fix' => null,
        'is_active' => null,
        'cashout_frequency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
        'commission_prorata' => 'commission_prorata',
        'commission_fix' => 'commission_fix',
        'is_active' => 'is_active',
        'cashout_frequency' => 'cashout_frequency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
        'commission_prorata' => 'setCommissionProrata',
        'commission_fix' => 'setCommissionFix',
        'is_active' => 'setIsActive',
        'cashout_frequency' => 'setCashoutFrequency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
        'commission_prorata' => 'getCommissionProrata',
        'commission_fix' => 'getCommissionFix',
        'is_active' => 'getIsActive',
        'cashout_frequency' => 'getCashoutFrequency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['commission_prorata'] = isset($data['commission_prorata']) ? $data['commission_prorata'] : null;
        $this->container['commission_fix'] = isset($data['commission_fix']) ? $data['commission_fix'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['cashout_frequency'] = isset($data['cashout_frequency']) ? $data['cashout_frequency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if (!is_null($this->container['commission_fix']) && ($this->container['commission_fix'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'commission_fix', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['commission_fix']) && ($this->container['commission_fix'] < 0)) {
            $invalidProperties[] = "invalid value for 'commission_fix', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets commission_prorata
     *
     * @return float
     */
    public function getCommissionProrata()
    {
        return $this->container['commission_prorata'];
    }

    /**
     * Sets commission_prorata
     *
     * @param float $commission_prorata commission_prorata
     *
     * @return $this
     */
    public function setCommissionProrata($commission_prorata)
    {
        $this->container['commission_prorata'] = $commission_prorata;

        return $this;
    }

    /**
     * Gets commission_fix
     *
     * @return int
     */
    public function getCommissionFix()
    {
        return $this->container['commission_fix'];
    }

    /**
     * Sets commission_fix
     *
     * @param int $commission_fix Marketplace commission fix for this currency, expressed in the smallest fraction possible for the related currency. For instance: 10 'EUR' is 0,10â‚¬.
     *
     * @return $this
     */
    public function setCommissionFix($commission_fix)
    {

        if (!is_null($commission_fix) && ($commission_fix > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $commission_fix when calling MarketplaceCurrency., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($commission_fix) && ($commission_fix < 0)) {
            throw new \InvalidArgumentException('invalid value for $commission_fix when calling MarketplaceCurrency., must be bigger than or equal to 0.');
        }

        $this->container['commission_fix'] = $commission_fix;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return string
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param string $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets cashout_frequency
     *
     * @return string
     */
    public function getCashoutFrequency()
    {
        return $this->container['cashout_frequency'];
    }

    /**
     * Sets cashout_frequency
     *
     * @param string $cashout_frequency cashout_frequency
     *
     * @return $this
     */
    public function setCashoutFrequency($cashout_frequency)
    {
        $this->container['cashout_frequency'] = $cashout_frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


