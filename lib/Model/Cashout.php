<?php
/**
 * Cashout
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Cashout Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Cashout implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Cashout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'href' => 'string',
        'uuid' => 'string',
        'seller' => 'string',
        'seller_external_ref' => 'string',
        'ref' => 'string',
        'status' => 'string',
        'amount' => 'int',
        'currency' => 'string',
        'executed_at' => '\DateTime',
        'captured_at' => '\DateTime',
        'capture_label' => 'string',
        'external_ref' => 'string',
        'transfers' => '\Swagger\Client\Model\CashoutTransfer[]',
        'refunds' => '\Swagger\Client\Model\CashoutRefundItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'href' => null,
        'uuid' => null,
        'seller' => null,
        'seller_external_ref' => null,
        'ref' => null,
        'status' => null,
        'amount' => null,
        'currency' => null,
        'executed_at' => 'date-time',
        'captured_at' => 'date',
        'capture_label' => null,
        'external_ref' => null,
        'transfers' => null,
        'refunds' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'href' => 'href',
        'uuid' => 'uuid',
        'seller' => 'seller',
        'seller_external_ref' => 'seller_external_ref',
        'ref' => 'ref',
        'status' => 'status',
        'amount' => 'amount',
        'currency' => 'currency',
        'executed_at' => 'executed_at',
        'captured_at' => 'captured_at',
        'capture_label' => 'capture_label',
        'external_ref' => 'external_ref',
        'transfers' => 'transfers',
        'refunds' => 'refunds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'href' => 'setHref',
        'uuid' => 'setUuid',
        'seller' => 'setSeller',
        'seller_external_ref' => 'setSellerExternalRef',
        'ref' => 'setRef',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'executed_at' => 'setExecutedAt',
        'captured_at' => 'setCapturedAt',
        'capture_label' => 'setCaptureLabel',
        'external_ref' => 'setExternalRef',
        'transfers' => 'setTransfers',
        'refunds' => 'setRefunds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'href' => 'getHref',
        'uuid' => 'getUuid',
        'seller' => 'getSeller',
        'seller_external_ref' => 'getSellerExternalRef',
        'ref' => 'getRef',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'executed_at' => 'getExecutedAt',
        'captured_at' => 'getCapturedAt',
        'capture_label' => 'getCaptureLabel',
        'external_ref' => 'getExternalRef',
        'transfers' => 'getTransfers',
        'refunds' => 'getRefunds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_CREATED = 'CREATED';
    const STATUS_PENDING = 'PENDING';
    const STATUS_SUCCEEDED = 'SUCCEEDED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_FAILED = 'FAILED';
    const STATUS_REJECTED = 'REJECTED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PENDING,
            self::STATUS_SUCCEEDED,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_REJECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['seller_external_ref'] = isset($data['seller_external_ref']) ? $data['seller_external_ref'] : null;
        $this->container['ref'] = isset($data['ref']) ? $data['ref'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['executed_at'] = isset($data['executed_at']) ? $data['executed_at'] : null;
        $this->container['captured_at'] = isset($data['captured_at']) ? $data['captured_at'] : null;
        $this->container['capture_label'] = isset($data['capture_label']) ? $data['capture_label'] : null;
        $this->container['external_ref'] = isset($data['external_ref']) ? $data['external_ref'] : null;
        $this->container['transfers'] = isset($data['transfers']) ? $data['transfers'] : null;
        $this->container['refunds'] = isset($data['refunds']) ? $data['refunds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ref'] === null) {
            $invalidProperties[] = "'ref' can't be null";
        }
        if ((mb_strlen($this->container['ref']) > 255)) {
            $invalidProperties[] = "invalid value for 'ref', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['ref']) < 1)) {
            $invalidProperties[] = "invalid value for 'ref', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if (!is_null($this->container['capture_label']) && (mb_strlen($this->container['capture_label']) > 255)) {
            $invalidProperties[] = "invalid value for 'capture_label', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_ref']) && (mb_strlen($this->container['external_ref']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_ref', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Unique identifier. This field is automatically generated.
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling Cashout., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string $seller seller
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets seller_external_ref
     *
     * @return string
     */
    public function getSellerExternalRef()
    {
        return $this->container['seller_external_ref'];
    }

    /**
     * Sets seller_external_ref
     *
     * @param string $seller_external_ref seller_external_ref
     *
     * @return $this
     */
    public function setSellerExternalRef($seller_external_ref)
    {
        $this->container['seller_external_ref'] = $seller_external_ref;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string $ref ref
     *
     * @return $this
     */
    public function setRef($ref)
    {
        if ((mb_strlen($ref) > 255)) {
            throw new \InvalidArgumentException('invalid length for $ref when calling Cashout., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($ref) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ref when calling Cashout., must be bigger than or equal to 1.');
        }

        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {

        if (($amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Cashout., must be smaller than or equal to 2147483647.');
        }
        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Cashout., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets executed_at
     *
     * @return \DateTime
     */
    public function getExecutedAt()
    {
        return $this->container['executed_at'];
    }

    /**
     * Sets executed_at
     *
     * @param \DateTime $executed_at executed_at
     *
     * @return $this
     */
    public function setExecutedAt($executed_at)
    {
        $this->container['executed_at'] = $executed_at;

        return $this;
    }

    /**
     * Gets captured_at
     *
     * @return \DateTime
     */
    public function getCapturedAt()
    {
        return $this->container['captured_at'];
    }

    /**
     * Sets captured_at
     *
     * @param \DateTime $captured_at captured_at
     *
     * @return $this
     */
    public function setCapturedAt($captured_at)
    {
        $this->container['captured_at'] = $captured_at;

        return $this;
    }

    /**
     * Gets capture_label
     *
     * @return string
     */
    public function getCaptureLabel()
    {
        return $this->container['capture_label'];
    }

    /**
     * Sets capture_label
     *
     * @param string $capture_label capture_label
     *
     * @return $this
     */
    public function setCaptureLabel($capture_label)
    {
        if (!is_null($capture_label) && (mb_strlen($capture_label) > 255)) {
            throw new \InvalidArgumentException('invalid length for $capture_label when calling Cashout., must be smaller than or equal to 255.');
        }

        $this->container['capture_label'] = $capture_label;

        return $this;
    }

    /**
     * Gets external_ref
     *
     * @return string
     */
    public function getExternalRef()
    {
        return $this->container['external_ref'];
    }

    /**
     * Sets external_ref
     *
     * @param string $external_ref external_ref
     *
     * @return $this
     */
    public function setExternalRef($external_ref)
    {
        if (!is_null($external_ref) && (mb_strlen($external_ref) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_ref when calling Cashout., must be smaller than or equal to 255.');
        }

        $this->container['external_ref'] = $external_ref;

        return $this;
    }

    /**
     * Gets transfers
     *
     * @return \Swagger\Client\Model\CashoutTransfer[]
     */
    public function getTransfers()
    {
        return $this->container['transfers'];
    }

    /**
     * Sets transfers
     *
     * @param \Swagger\Client\Model\CashoutTransfer[] $transfers transfers
     *
     * @return $this
     */
    public function setTransfers($transfers)
    {
        $this->container['transfers'] = $transfers;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \Swagger\Client\Model\CashoutRefundItem[]
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \Swagger\Client\Model\CashoutRefundItem[] $refunds refunds
     *
     * @return $this
     */
    public function setRefunds($refunds)
    {
        $this->container['refunds'] = $refunds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


