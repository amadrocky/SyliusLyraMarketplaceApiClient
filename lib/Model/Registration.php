<?php
/**
 * Registration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Registration Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Registration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Registration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'seller' => 'string',
        'href' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'marketplace' => 'string',
        'name' => 'string',
        'person_type' => 'string',
        'title' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'trading_name' => 'string',
        'nature' => 'string',
        'reference' => 'string',
        'description' => 'string',
        'iban' => 'string',
        'status' => 'string',
        'legal_form' => 'int',
        'economic_agent' => 'string',
        'vat_number' => 'string',
        'cashout_delay' => 'int',
        'external_ref' => 'string',
        'turnover' => 'int',
        'address' => '\Swagger\Client\Model\Address',
        'board' => '\Swagger\Client\Model\BoardMember[]',
        'activities' => '\Swagger\Client\Model\Activity[]',
        'ibans' => '\Swagger\Client\Model\RegistrationIBAN[]',
        'vouchers' => '\Swagger\Client\Model\RegistrationVoucher[]',
        'links' => '\Swagger\Client\Model\RegistrationLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'seller' => null,
        'href' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'marketplace' => null,
        'name' => null,
        'person_type' => null,
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'trading_name' => null,
        'nature' => null,
        'reference' => null,
        'description' => null,
        'iban' => null,
        'status' => null,
        'legal_form' => null,
        'economic_agent' => null,
        'vat_number' => null,
        'cashout_delay' => null,
        'external_ref' => null,
        'turnover' => null,
        'address' => null,
        'board' => null,
        'activities' => null,
        'ibans' => null,
        'vouchers' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'seller' => 'seller',
        'href' => 'href',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'marketplace' => 'marketplace',
        'name' => 'name',
        'person_type' => 'person_type',
        'title' => 'title',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'trading_name' => 'trading_name',
        'nature' => 'nature',
        'reference' => 'reference',
        'description' => 'description',
        'iban' => 'iban',
        'status' => 'status',
        'legal_form' => 'legal_form',
        'economic_agent' => 'economic_agent',
        'vat_number' => 'vat_number',
        'cashout_delay' => 'cashout_delay',
        'external_ref' => 'external_ref',
        'turnover' => 'turnover',
        'address' => 'address',
        'board' => 'board',
        'activities' => 'activities',
        'ibans' => 'ibans',
        'vouchers' => 'vouchers',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'seller' => 'setSeller',
        'href' => 'setHref',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'marketplace' => 'setMarketplace',
        'name' => 'setName',
        'person_type' => 'setPersonType',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'trading_name' => 'setTradingName',
        'nature' => 'setNature',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'iban' => 'setIban',
        'status' => 'setStatus',
        'legal_form' => 'setLegalForm',
        'economic_agent' => 'setEconomicAgent',
        'vat_number' => 'setVatNumber',
        'cashout_delay' => 'setCashoutDelay',
        'external_ref' => 'setExternalRef',
        'turnover' => 'setTurnover',
        'address' => 'setAddress',
        'board' => 'setBoard',
        'activities' => 'setActivities',
        'ibans' => 'setIbans',
        'vouchers' => 'setVouchers',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'seller' => 'getSeller',
        'href' => 'getHref',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'marketplace' => 'getMarketplace',
        'name' => 'getName',
        'person_type' => 'getPersonType',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'trading_name' => 'getTradingName',
        'nature' => 'getNature',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'iban' => 'getIban',
        'status' => 'getStatus',
        'legal_form' => 'getLegalForm',
        'economic_agent' => 'getEconomicAgent',
        'vat_number' => 'getVatNumber',
        'cashout_delay' => 'getCashoutDelay',
        'external_ref' => 'getExternalRef',
        'turnover' => 'getTurnover',
        'address' => 'getAddress',
        'board' => 'getBoard',
        'activities' => 'getActivities',
        'ibans' => 'getIbans',
        'vouchers' => 'getVouchers',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PERSON_TYPE_PM = 'PM';
    const PERSON_TYPE_PP = 'PP';
    const STATUS_CREATED = 'CREATED';
    const STATUS_AWAITING_SUBMISSION = 'AWAITING_SUBMISSION';
    const STATUS_PENDING_VERIFICATION = 'PENDING_VERIFICATION';
    const STATUS_SUCCEEDED = 'SUCCEEDED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_FAILED = 'FAILED';
    const STATUS_ABANDONED = 'ABANDONED';
    const STATUS_CLOSED = 'CLOSED';
    const STATUS_SUSPENDED = 'SUSPENDED';
    const STATUS_REJECTED = 'REJECTED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPersonTypeAllowableValues()
    {
        return [
            self::PERSON_TYPE_PM,
            self::PERSON_TYPE_PP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_AWAITING_SUBMISSION,
            self::STATUS_PENDING_VERIFICATION,
            self::STATUS_SUCCEEDED,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_ABANDONED,
            self::STATUS_CLOSED,
            self::STATUS_SUSPENDED,
            self::STATUS_REJECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['marketplace'] = isset($data['marketplace']) ? $data['marketplace'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['person_type'] = isset($data['person_type']) ? $data['person_type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['trading_name'] = isset($data['trading_name']) ? $data['trading_name'] : null;
        $this->container['nature'] = isset($data['nature']) ? $data['nature'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['legal_form'] = isset($data['legal_form']) ? $data['legal_form'] : null;
        $this->container['economic_agent'] = isset($data['economic_agent']) ? $data['economic_agent'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['cashout_delay'] = isset($data['cashout_delay']) ? $data['cashout_delay'] : null;
        $this->container['external_ref'] = isset($data['external_ref']) ? $data['external_ref'] : null;
        $this->container['turnover'] = isset($data['turnover']) ? $data['turnover'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['board'] = isset($data['board']) ? $data['board'] : null;
        $this->container['activities'] = isset($data['activities']) ? $data['activities'] : null;
        $this->container['ibans'] = isset($data['ibans']) ? $data['ibans'] : null;
        $this->container['vouchers'] = isset($data['vouchers']) ? $data['vouchers'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['marketplace'] === null) {
            $invalidProperties[] = "'marketplace' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['person_type'] === null) {
            $invalidProperties[] = "'person_type' can't be null";
        }
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!is_null($this->container['person_type']) && !in_array($this->container['person_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'person_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 63)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) > 63)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['trading_name']) && (mb_strlen($this->container['trading_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'trading_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['nature']) && (mb_strlen($this->container['nature']) > 255)) {
            $invalidProperties[] = "invalid value for 'nature', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 255)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['iban']) && (mb_strlen($this->container['iban']) > 34)) {
            $invalidProperties[] = "invalid value for 'iban', the character length must be smaller than or equal to 34.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['legal_form']) && ($this->container['legal_form'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'legal_form', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['legal_form']) && ($this->container['legal_form'] < 0)) {
            $invalidProperties[] = "invalid value for 'legal_form', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['economic_agent']) && (mb_strlen($this->container['economic_agent']) > 255)) {
            $invalidProperties[] = "invalid value for 'economic_agent', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['vat_number'] === null) {
            $invalidProperties[] = "'vat_number' can't be null";
        }
        if ((mb_strlen($this->container['vat_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 16.";
        }

        if ((mb_strlen($this->container['vat_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cashout_delay']) && ($this->container['cashout_delay'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'cashout_delay', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['cashout_delay']) && ($this->container['cashout_delay'] < 0)) {
            $invalidProperties[] = "invalid value for 'cashout_delay', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['external_ref']) && (mb_strlen($this->container['external_ref']) > 50)) {
            $invalidProperties[] = "invalid value for 'external_ref', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['turnover']) && ($this->container['turnover'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'turnover', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['turnover']) && ($this->container['turnover'] < 0)) {
            $invalidProperties[] = "invalid value for 'turnover', must be bigger than or equal to 0.";
        }

        if ($this->container['board'] === null) {
            $invalidProperties[] = "'board' can't be null";
        }
        if ($this->container['activities'] === null) {
            $invalidProperties[] = "'activities' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Unique identifier. This field is automatically generated.
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling Registration., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string $seller seller
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href href
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date. This field is automatically generated.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date of the last modification. This field is automatically generated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return string
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param string $marketplace Uuid of the marketplace.
     *
     * @return $this
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Company name (name of the company as indicated on the KBIS).
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Registration., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Registration., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets person_type
     *
     * @return string
     */
    public function getPersonType()
    {
        return $this->container['person_type'];
    }

    /**
     * Sets person_type
     *
     * @param string $person_type Seller's type, either natural person ('PP') or legal entity ('PM'). Default is 'PM'.
     *
     * @return $this
     */
    public function setPersonType($person_type)
    {
        $allowedValues = $this->getPersonTypeAllowableValues();
        if (!in_array($person_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'person_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['person_type'] = $person_type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Seller's title, if a natural person.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        if (!is_null($title) && (mb_strlen($title) > 63)) {
            throw new \InvalidArgumentException('invalid length for $title when calling Registration., must be smaller than or equal to 63.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name Seller's first_name, if a natural person.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (!is_null($first_name) && (mb_strlen($first_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Registration., must be smaller than or equal to 63.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Seller's last name, if a natural person.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (!is_null($last_name) && (mb_strlen($last_name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Registration., must be smaller than or equal to 63.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets trading_name
     *
     * @return string
     */
    public function getTradingName()
    {
        return $this->container['trading_name'];
    }

    /**
     * Sets trading_name
     *
     * @param string $trading_name Seller's trading name, if it is a legal entity.
     *
     * @return $this
     */
    public function setTradingName($trading_name)
    {
        if (!is_null($trading_name) && (mb_strlen($trading_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $trading_name when calling Registration., must be smaller than or equal to 255.');
        }

        $this->container['trading_name'] = $trading_name;

        return $this;
    }

    /**
     * Gets nature
     *
     * @return string
     */
    public function getNature()
    {
        return $this->container['nature'];
    }

    /**
     * Sets nature
     *
     * @param string $nature Company name (name of the company as indicated on the KBIS).
     *
     * @return $this
     */
    public function setNature($nature)
    {
        if (!is_null($nature) && (mb_strlen($nature) > 255)) {
            throw new \InvalidArgumentException('invalid length for $nature when calling Registration., must be smaller than or equal to 255.');
        }

        $this->container['nature'] = $nature;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference WARNING: this field will be read-only as it returns the seller reference (e.g. \"SL012345\") as soon as the registration has been created.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 255)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Registration., must be smaller than or equal to 255.');
        }
        if (!is_null($reference) && (mb_strlen($reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Registration., must be bigger than or equal to 1.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the seller.
     *
     * @return $this
     */
    public function setDescription($description)
    {

        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Registration., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban Iban of the seller. Applicable only if the marketplace supports only one currency. Otherwise the 'ibans' property must be set instead.
     *
     * @return $this
     */
    public function setIban($iban)
    {
        if (!is_null($iban) && (mb_strlen($iban) > 34)) {
            throw new \InvalidArgumentException('invalid length for $iban when calling Registration., must be smaller than or equal to 34.');
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Current status of the registration.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets legal_form
     *
     * @return int
     */
    public function getLegalForm()
    {
        return $this->container['legal_form'];
    }

    /**
     * Sets legal_form
     *
     * @param int $legal_form Legal form of the seller. See documentation.
     *
     * @return $this
     */
    public function setLegalForm($legal_form)
    {

        if (!is_null($legal_form) && ($legal_form > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $legal_form when calling Registration., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($legal_form) && ($legal_form < 0)) {
            throw new \InvalidArgumentException('invalid value for $legal_form when calling Registration., must be bigger than or equal to 0.');
        }

        $this->container['legal_form'] = $legal_form;

        return $this;
    }

    /**
     * Gets economic_agent
     *
     * @return string
     */
    public function getEconomicAgent()
    {
        return $this->container['economic_agent'];
    }

    /**
     * Sets economic_agent
     *
     * @param string $economic_agent Economic agent ISO code.
     *
     * @return $this
     */
    public function setEconomicAgent($economic_agent)
    {
        if (!is_null($economic_agent) && (mb_strlen($economic_agent) > 255)) {
            throw new \InvalidArgumentException('invalid length for $economic_agent when calling Registration., must be smaller than or equal to 255.');
        }

        $this->container['economic_agent'] = $economic_agent;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number VAT number. When the seller is not subject to VAT, indicate the VAT number of the Marketplace.
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        if ((mb_strlen($vat_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling Registration., must be smaller than or equal to 16.');
        }
        if ((mb_strlen($vat_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling Registration., must be bigger than or equal to 1.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets cashout_delay
     *
     * @return int
     */
    public function getCashoutDelay()
    {
        return $this->container['cashout_delay'];
    }

    /**
     * Sets cashout_delay
     *
     * @param int $cashout_delay Delay between the capture of a transaction and the cashout to the seller.
     *
     * @return $this
     */
    public function setCashoutDelay($cashout_delay)
    {

        if (!is_null($cashout_delay) && ($cashout_delay > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $cashout_delay when calling Registration., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($cashout_delay) && ($cashout_delay < 0)) {
            throw new \InvalidArgumentException('invalid value for $cashout_delay when calling Registration., must be bigger than or equal to 0.');
        }

        $this->container['cashout_delay'] = $cashout_delay;

        return $this;
    }

    /**
     * Gets external_ref
     *
     * @return string
     */
    public function getExternalRef()
    {
        return $this->container['external_ref'];
    }

    /**
     * Sets external_ref
     *
     * @param string $external_ref Your ID of the seller. This allows you to avoid having to use the seller uuid when ordering.
     *
     * @return $this
     */
    public function setExternalRef($external_ref)
    {
        if (!is_null($external_ref) && (mb_strlen($external_ref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $external_ref when calling Registration., must be smaller than or equal to 50.');
        }

        $this->container['external_ref'] = $external_ref;

        return $this;
    }

    /**
     * Gets turnover
     *
     * @return int
     */
    public function getTurnover()
    {
        return $this->container['turnover'];
    }

    /**
     * Sets turnover
     *
     * @param int $turnover Expected turnover, expressed in the smallest existing monetary unit (e.g. cents).
     *
     * @return $this
     */
    public function setTurnover($turnover)
    {

        if (!is_null($turnover) && ($turnover > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $turnover when calling Registration., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($turnover) && ($turnover < 0)) {
            throw new \InvalidArgumentException('invalid value for $turnover when calling Registration., must be bigger than or equal to 0.');
        }

        $this->container['turnover'] = $turnover;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets board
     *
     * @return \Swagger\Client\Model\BoardMember[]
     */
    public function getBoard()
    {
        return $this->container['board'];
    }

    /**
     * Sets board
     *
     * @param \Swagger\Client\Model\BoardMember[] $board board
     *
     * @return $this
     */
    public function setBoard($board)
    {
        $this->container['board'] = $board;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return \Swagger\Client\Model\Activity[]
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param \Swagger\Client\Model\Activity[] $activities activities
     *
     * @return $this
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets ibans
     *
     * @return \Swagger\Client\Model\RegistrationIBAN[]
     */
    public function getIbans()
    {
        return $this->container['ibans'];
    }

    /**
     * Sets ibans
     *
     * @param \Swagger\Client\Model\RegistrationIBAN[] $ibans List of ibans associated with their currencies.
     *
     * @return $this
     */
    public function setIbans($ibans)
    {
        $this->container['ibans'] = $ibans;

        return $this;
    }

    /**
     * Gets vouchers
     *
     * @return \Swagger\Client\Model\RegistrationVoucher[]
     */
    public function getVouchers()
    {
        return $this->container['vouchers'];
    }

    /**
     * Sets vouchers
     *
     * @param \Swagger\Client\Model\RegistrationVoucher[] $vouchers Eligible vouchers with their contract numbers.
     *
     * @return $this
     */
    public function setVouchers($vouchers)
    {
        $this->container['vouchers'] = $vouchers;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\RegistrationLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\RegistrationLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


