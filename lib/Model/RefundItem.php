<?php
/**
 * RefundItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RefundItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RefundItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RefundItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'seller' => 'string',
        'refund' => 'string',
        'item' => 'string',
        'reference' => 'string',
        'description' => 'string',
        'amount' => 'int',
        'is_commission' => 'bool',
        'seller_external_ref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'seller' => null,
        'refund' => null,
        'item' => null,
        'reference' => null,
        'description' => null,
        'amount' => null,
        'is_commission' => null,
        'seller_external_ref' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seller' => 'seller',
        'refund' => 'refund',
        'item' => 'item',
        'reference' => 'reference',
        'description' => 'description',
        'amount' => 'amount',
        'is_commission' => 'is_commission',
        'seller_external_ref' => 'seller_external_ref'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'seller' => 'setSeller',
        'refund' => 'setRefund',
        'item' => 'setItem',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'amount' => 'setAmount',
        'is_commission' => 'setIsCommission',
        'seller_external_ref' => 'setSellerExternalRef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seller' => 'getSeller',
        'refund' => 'getRefund',
        'item' => 'getItem',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'amount' => 'getAmount',
        'is_commission' => 'getIsCommission',
        'seller_external_ref' => 'getSellerExternalRef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['refund'] = isset($data['refund']) ? $data['refund'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['is_commission'] = isset($data['is_commission']) ? $data['is_commission'] : null;
        $this->container['seller_external_ref'] = isset($data['seller_external_ref']) ? $data['seller_external_ref'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ((mb_strlen($this->container['reference']) > 32)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['seller_external_ref']) && (mb_strlen($this->container['seller_external_ref']) > 255)) {
            $invalidProperties[] = "invalid value for 'seller_external_ref', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['seller_external_ref']) && (mb_strlen($this->container['seller_external_ref']) < 1)) {
            $invalidProperties[] = "invalid value for 'seller_external_ref', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets seller
     *
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string $seller Uuid of the seller. Alternatively, use seller_external_ref.
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return string
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param string $refund refund
     *
     * @return $this
     */
    public function setRefund($refund)
    {
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item Uuid of the item.
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Refund item reference.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if ((mb_strlen($reference) > 32)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling RefundItem., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling RefundItem., must be bigger than or equal to 1.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Refund item description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RefundItem., must be smaller than or equal to 255.');
        }
        if (!is_null($description) && (mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling RefundItem., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {

        if (($amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling RefundItem., must be smaller than or equal to 2147483647.');
        }
        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling RefundItem., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets is_commission
     *
     * @return bool
     */
    public function getIsCommission()
    {
        return $this->container['is_commission'];
    }

    /**
     * Sets is_commission
     *
     * @param bool $is_commission is_commission
     *
     * @return $this
     */
    public function setIsCommission($is_commission)
    {
        $this->container['is_commission'] = $is_commission;

        return $this;
    }

    /**
     * Gets seller_external_ref
     *
     * @return string
     */
    public function getSellerExternalRef()
    {
        return $this->container['seller_external_ref'];
    }

    /**
     * Sets seller_external_ref
     *
     * @param string $seller_external_ref External reference of the seller. This field is mandatory if seller is not set.
     *
     * @return $this
     */
    public function setSellerExternalRef($seller_external_ref)
    {
        if (!is_null($seller_external_ref) && (mb_strlen($seller_external_ref) > 255)) {
            throw new \InvalidArgumentException('invalid length for $seller_external_ref when calling RefundItem., must be smaller than or equal to 255.');
        }
        if (!is_null($seller_external_ref) && (mb_strlen($seller_external_ref) < 1)) {
            throw new \InvalidArgumentException('invalid length for $seller_external_ref when calling RefundItem., must be bigger than or equal to 1.');
        }

        $this->container['seller_external_ref'] = $seller_external_ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


