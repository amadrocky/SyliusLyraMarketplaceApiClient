<?php
/**
 * ItemSerializer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ItemSerializer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemSerializer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemSerializer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'href' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'seller' => 'string',
        'seller_external_ref' => 'string',
        'order' => 'string',
        'reference' => 'string',
        'description' => 'string',
        'type' => 'string',
        'amount' => 'int',
        'quantity' => 'int',
        'is_commission' => 'bool',
        'commission_amount' => 'int',
        'status' => 'string',
        'hold_payment' => 'bool',
        'transfers' => '\Swagger\Client\Model\Transfer[]',
        'vouchers' => '\Swagger\Client\Model\ItemVoucher[]',
        'links' => '\Swagger\Client\Model\ItemLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'href' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'seller' => null,
        'seller_external_ref' => null,
        'order' => null,
        'reference' => null,
        'description' => null,
        'type' => null,
        'amount' => null,
        'quantity' => null,
        'is_commission' => null,
        'commission_amount' => null,
        'status' => null,
        'hold_payment' => null,
        'transfers' => null,
        'vouchers' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'href' => 'href',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'seller' => 'seller',
        'seller_external_ref' => 'seller_external_ref',
        'order' => 'order',
        'reference' => 'reference',
        'description' => 'description',
        'type' => 'type',
        'amount' => 'amount',
        'quantity' => 'quantity',
        'is_commission' => 'is_commission',
        'commission_amount' => 'commission_amount',
        'status' => 'status',
        'hold_payment' => 'hold_payment',
        'transfers' => 'transfers',
        'vouchers' => 'vouchers',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'href' => 'setHref',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'seller' => 'setSeller',
        'seller_external_ref' => 'setSellerExternalRef',
        'order' => 'setOrder',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'type' => 'setType',
        'amount' => 'setAmount',
        'quantity' => 'setQuantity',
        'is_commission' => 'setIsCommission',
        'commission_amount' => 'setCommissionAmount',
        'status' => 'setStatus',
        'hold_payment' => 'setHoldPayment',
        'transfers' => 'setTransfers',
        'vouchers' => 'setVouchers',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'href' => 'getHref',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'seller' => 'getSeller',
        'seller_external_ref' => 'getSellerExternalRef',
        'order' => 'getOrder',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'type' => 'getType',
        'amount' => 'getAmount',
        'quantity' => 'getQuantity',
        'is_commission' => 'getIsCommission',
        'commission_amount' => 'getCommissionAmount',
        'status' => 'getStatus',
        'hold_payment' => 'getHoldPayment',
        'transfers' => 'getTransfers',
        'vouchers' => 'getVouchers',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_FOOD_AND_GROCERY = 'FOOD_AND_GROCERY';
    const TYPE_AUTOMOTIVE = 'AUTOMOTIVE';
    const TYPE_ENTERTAINMENT = 'ENTERTAINMENT';
    const TYPE_HOME_AND_GARDEN = 'HOME_AND_GARDEN';
    const TYPE_HOME_APPLIANCE = 'HOME_APPLIANCE';
    const TYPE_AUCTION_AND_GROUP_BUYING = 'AUCTION_AND_GROUP_BUYING';
    const TYPE_FLOWERS_AND_GIFTS = 'FLOWERS_AND_GIFTS';
    const TYPE_COMPUTER_AND_SOFTWARE = 'COMPUTER_AND_SOFTWARE';
    const TYPE_HEALTH_AND_BEAUTY = 'HEALTH_AND_BEAUTY';
    const TYPE_SERVICE_FOR_INDIVIDUAL = 'SERVICE_FOR_INDIVIDUAL';
    const TYPE_SERVICE_FOR_BUSINESS = 'SERVICE_FOR_BUSINESS';
    const TYPE_SPORTS = 'SPORTS';
    const TYPE_CLOTHING_AND_ACCESSORIES = 'CLOTHING_AND_ACCESSORIES';
    const TYPE_TRAVEL = 'TRAVEL';
    const TYPE_HOME_AUDIO_PHOTO_VIDEO = 'HOME_AUDIO_PHOTO_VIDEO';
    const TYPE_TELEPHONY = 'TELEPHONY';
    const STATUS_CREATED = 'CREATED';
    const STATUS_PENDING = 'PENDING';
    const STATUS_SUCCEEDED = 'SUCCEEDED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_FAILED = 'FAILED';
    const STATUS_ABANDONED = 'ABANDONED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FOOD_AND_GROCERY,
            self::TYPE_AUTOMOTIVE,
            self::TYPE_ENTERTAINMENT,
            self::TYPE_HOME_AND_GARDEN,
            self::TYPE_HOME_APPLIANCE,
            self::TYPE_AUCTION_AND_GROUP_BUYING,
            self::TYPE_FLOWERS_AND_GIFTS,
            self::TYPE_COMPUTER_AND_SOFTWARE,
            self::TYPE_HEALTH_AND_BEAUTY,
            self::TYPE_SERVICE_FOR_INDIVIDUAL,
            self::TYPE_SERVICE_FOR_BUSINESS,
            self::TYPE_SPORTS,
            self::TYPE_CLOTHING_AND_ACCESSORIES,
            self::TYPE_TRAVEL,
            self::TYPE_HOME_AUDIO_PHOTO_VIDEO,
            self::TYPE_TELEPHONY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PENDING,
            self::STATUS_SUCCEEDED,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_ABANDONED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['href'] = isset($data['href']) ? $data['href'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['seller_external_ref'] = isset($data['seller_external_ref']) ? $data['seller_external_ref'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['is_commission'] = isset($data['is_commission']) ? $data['is_commission'] : null;
        $this->container['commission_amount'] = isset($data['commission_amount']) ? $data['commission_amount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['hold_payment'] = isset($data['hold_payment']) ? $data['hold_payment'] : null;
        $this->container['transfers'] = isset($data['transfers']) ? $data['transfers'] : null;
        $this->container['vouchers'] = isset($data['vouchers']) ? $data['vouchers'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['seller_external_ref']) && (mb_strlen($this->container['seller_external_ref']) > 50)) {
            $invalidProperties[] = "invalid value for 'seller_external_ref', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['seller_external_ref']) && (mb_strlen($this->container['seller_external_ref']) < 1)) {
            $invalidProperties[] = "invalid value for 'seller_external_ref', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ((mb_strlen($this->container['reference']) > 32)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^[a-zA-Z0-9_\\-]+$/", $this->container['reference'])) {
            $invalidProperties[] = "invalid value for 'reference', must be conform to the pattern /^[a-zA-Z0-9_\\-]+$/.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ((mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/[-\\w ]+$/", $this->container['description'])) {
            $invalidProperties[] = "invalid value for 'description', must be conform to the pattern /[-\\w ]+$/.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] > 32767)) {
            $invalidProperties[] = "invalid value for 'quantity', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['quantity']) && ($this->container['quantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'quantity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['commission_amount']) && ($this->container['commission_amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'commission_amount', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['commission_amount']) && ($this->container['commission_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'commission_amount', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Unique identifier. This field is automatically generated.
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling ItemSerializer., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets href
     *
     * @return string
     */
    public function getHref()
    {
        return $this->container['href'];
    }

    /**
     * Sets href
     *
     * @param string $href Url of the resource. This field is automatically generated.
     *
     * @return $this
     */
    public function setHref($href)
    {
        $this->container['href'] = $href;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date. This field is automatically generated.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date of the last modification. This field is automatically generated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string $seller uuid of the related seller. You may use seller_external_ref instead.
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets seller_external_ref
     *
     * @return string
     */
    public function getSellerExternalRef()
    {
        return $this->container['seller_external_ref'];
    }

    /**
     * Sets seller_external_ref
     *
     * @param string $seller_external_ref External reference of the seller.
     *
     * @return $this
     */
    public function setSellerExternalRef($seller_external_ref)
    {
        if (!is_null($seller_external_ref) && (mb_strlen($seller_external_ref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $seller_external_ref when calling ItemSerializer., must be smaller than or equal to 50.');
        }
        if (!is_null($seller_external_ref) && (mb_strlen($seller_external_ref) < 1)) {
            throw new \InvalidArgumentException('invalid length for $seller_external_ref when calling ItemSerializer., must be bigger than or equal to 1.');
        }

        $this->container['seller_external_ref'] = $seller_external_ref;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order uuid of the order.
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Reference of the item.
     *
     * @return $this
     */
    public function setReference($reference)
    {
        if ((mb_strlen($reference) > 32)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling ItemSerializer., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling ItemSerializer., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_\\-]+$/", $reference))) {
            throw new \InvalidArgumentException("invalid value for $reference when calling ItemSerializer., must conform to the pattern /^[a-zA-Z0-9_\\-]+$/.");
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the item.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if ((mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ItemSerializer., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling ItemSerializer., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/[-\\w ]+$/", $description))) {
            throw new \InvalidArgumentException("invalid value for $description when calling ItemSerializer., must conform to the pattern /[-\\w ]+$/.");
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of item (eg. ENTERTAINMENT, SPORT, etc.).
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Total amount (price) of the item.
     *
     * @return $this
     */
    public function setAmount($amount)
    {

        if (($amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling ItemSerializer., must be smaller than or equal to 2147483647.');
        }
        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling ItemSerializer., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Quantity of items ordered. This field is for information only and has no effect on the amount of the order.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (!is_null($quantity) && ($quantity > 32767)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling ItemSerializer., must be smaller than or equal to 32767.');
        }
        if (!is_null($quantity) && ($quantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling ItemSerializer., must be bigger than or equal to 0.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets is_commission
     *
     * @return bool
     */
    public function getIsCommission()
    {
        return $this->container['is_commission'];
    }

    /**
     * Sets is_commission
     *
     * @param bool $is_commission If set to true, this item represents a commission owed to the marketplace.
     *
     * @return $this
     */
    public function setIsCommission($is_commission)
    {
        $this->container['is_commission'] = $is_commission;

        return $this;
    }

    /**
     * Gets commission_amount
     *
     * @return int
     */
    public function getCommissionAmount()
    {
        return $this->container['commission_amount'];
    }

    /**
     * Sets commission_amount
     *
     * @param int $commission_amount Commission amount related to this item and included in the total amount. A non-null value is incompatible with is_commission = True.
     *
     * @return $this
     */
    public function setCommissionAmount($commission_amount)
    {

        if (!is_null($commission_amount) && ($commission_amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $commission_amount when calling ItemSerializer., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($commission_amount) && ($commission_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $commission_amount when calling ItemSerializer., must be bigger than or equal to 0.');
        }

        $this->container['commission_amount'] = $commission_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Current status of the item.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hold_payment
     *
     * @return bool
     */
    public function getHoldPayment()
    {
        return $this->container['hold_payment'];
    }

    /**
     * Sets hold_payment
     *
     * @param bool $hold_payment If true, the cashout to the corresponding seller will be hold until this item is activated.
     *
     * @return $this
     */
    public function setHoldPayment($hold_payment)
    {
        $this->container['hold_payment'] = $hold_payment;

        return $this;
    }

    /**
     * Gets transfers
     *
     * @return \Swagger\Client\Model\Transfer[]
     */
    public function getTransfers()
    {
        return $this->container['transfers'];
    }

    /**
     * Sets transfers
     *
     * @param \Swagger\Client\Model\Transfer[] $transfers transfers
     *
     * @return $this
     */
    public function setTransfers($transfers)
    {
        $this->container['transfers'] = $transfers;

        return $this;
    }

    /**
     * Gets vouchers
     *
     * @return \Swagger\Client\Model\ItemVoucher[]
     */
    public function getVouchers()
    {
        return $this->container['vouchers'];
    }

    /**
     * Sets vouchers
     *
     * @param \Swagger\Client\Model\ItemVoucher[] $vouchers vouchers
     *
     * @return $this
     */
    public function setVouchers($vouchers)
    {
        $this->container['vouchers'] = $vouchers;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\ItemLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\ItemLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


