<?php
/**
 * ItemVoucher
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ItemVoucher Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ItemVoucher implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ItemVoucher';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contract_type' => 'string',
        'eligible_amount' => 'int',
        'actual_amount' => 'int',
        'is_selected' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contract_type' => null,
        'eligible_amount' => null,
        'actual_amount' => null,
        'is_selected' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contract_type' => 'contract_type',
        'eligible_amount' => 'eligible_amount',
        'actual_amount' => 'actual_amount',
        'is_selected' => 'is_selected'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contract_type' => 'setContractType',
        'eligible_amount' => 'setEligibleAmount',
        'actual_amount' => 'setActualAmount',
        'is_selected' => 'setIsSelected'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contract_type' => 'getContractType',
        'eligible_amount' => 'getEligibleAmount',
        'actual_amount' => 'getActualAmount',
        'is_selected' => 'getIsSelected'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contract_type'] = isset($data['contract_type']) ? $data['contract_type'] : null;
        $this->container['eligible_amount'] = isset($data['eligible_amount']) ? $data['eligible_amount'] : null;
        $this->container['actual_amount'] = isset($data['actual_amount']) ? $data['actual_amount'] : null;
        $this->container['is_selected'] = isset($data['is_selected']) ? $data['is_selected'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contract_type'] === null) {
            $invalidProperties[] = "'contract_type' can't be null";
        }
        if (!is_null($this->container['eligible_amount']) && ($this->container['eligible_amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'eligible_amount', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['eligible_amount']) && ($this->container['eligible_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'eligible_amount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contract_type
     *
     * @return string
     */
    public function getContractType()
    {
        return $this->container['contract_type'];
    }

    /**
     * Sets contract_type
     *
     * @param string $contract_type contract_type
     *
     * @return $this
     */
    public function setContractType($contract_type)
    {
        $this->container['contract_type'] = $contract_type;

        return $this;
    }

    /**
     * Gets eligible_amount
     *
     * @return int
     */
    public function getEligibleAmount()
    {
        return $this->container['eligible_amount'];
    }

    /**
     * Sets eligible_amount
     *
     * @param int $eligible_amount Applies only to CONECS type vouchers: maximum amount eligible at the item level.
     *
     * @return $this
     */
    public function setEligibleAmount($eligible_amount)
    {

        if (!is_null($eligible_amount) && ($eligible_amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $eligible_amount when calling ItemVoucher., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($eligible_amount) && ($eligible_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $eligible_amount when calling ItemVoucher., must be bigger than or equal to 0.');
        }

        $this->container['eligible_amount'] = $eligible_amount;

        return $this;
    }

    /**
     * Gets actual_amount
     *
     * @return int
     */
    public function getActualAmount()
    {
        return $this->container['actual_amount'];
    }

    /**
     * Sets actual_amount
     *
     * @param int $actual_amount Amount actually paid by the buyer. This is set by the API when processing the IPN request.
     *
     * @return $this
     */
    public function setActualAmount($actual_amount)
    {
        $this->container['actual_amount'] = $actual_amount;

        return $this;
    }

    /**
     * Gets is_selected
     *
     * @return bool
     */
    public function getIsSelected()
    {
        return $this->container['is_selected'];
    }

    /**
     * Sets is_selected
     *
     * @param bool $is_selected Only one contract type (e.g. CONECS, CVCONNECT, etc.) is applicable at the order level. The contract with the highest cumulated amount is automatically selected by the API at execution time.
     *
     * @return $this
     */
    public function setIsSelected($is_selected)
    {
        $this->container['is_selected'] = $is_selected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


