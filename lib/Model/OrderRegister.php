<?php
/**
 * OrderRegister
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrderRegister Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderRegister implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderRegister';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'marketplace' => 'string',
        'buyer' => '\Swagger\Client\Model\Buyer',
        'language' => 'string',
        'url_return' => 'string',
        'status' => 'string',
        'alias' => 'string',
        'alias_to_update' => 'string',
        'payment_url' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'marketplace' => null,
        'buyer' => null,
        'language' => null,
        'url_return' => 'uri',
        'status' => null,
        'alias' => null,
        'alias_to_update' => null,
        'payment_url' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'marketplace' => 'marketplace',
        'buyer' => 'buyer',
        'language' => 'language',
        'url_return' => 'url_return',
        'status' => 'status',
        'alias' => 'alias',
        'alias_to_update' => 'alias_to_update',
        'payment_url' => 'payment_url',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'marketplace' => 'setMarketplace',
        'buyer' => 'setBuyer',
        'language' => 'setLanguage',
        'url_return' => 'setUrlReturn',
        'status' => 'setStatus',
        'alias' => 'setAlias',
        'alias_to_update' => 'setAliasToUpdate',
        'payment_url' => 'setPaymentUrl',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'marketplace' => 'getMarketplace',
        'buyer' => 'getBuyer',
        'language' => 'getLanguage',
        'url_return' => 'getUrlReturn',
        'status' => 'getStatus',
        'alias' => 'getAlias',
        'alias_to_update' => 'getAliasToUpdate',
        'payment_url' => 'getPaymentUrl',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LANGUAGE_DE = 'de';
    const LANGUAGE_EN = 'en';
    const LANGUAGE_ES = 'es';
    const LANGUAGE_FR = 'fr';
    const LANGUAGE_IT = 'it';
    const LANGUAGE_JA = 'ja';
    const LANGUAGE_NL = 'nl';
    const LANGUAGE_PL = 'pl';
    const LANGUAGE_PT = 'pt';
    const LANGUAGE_RU = 'ru';
    const LANGUAGE_SV = 'sv';
    const LANGUAGE_TR = 'tr';
    const LANGUAGE_ZH = 'zh';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_DE,
            self::LANGUAGE_EN,
            self::LANGUAGE_ES,
            self::LANGUAGE_FR,
            self::LANGUAGE_IT,
            self::LANGUAGE_JA,
            self::LANGUAGE_NL,
            self::LANGUAGE_PL,
            self::LANGUAGE_PT,
            self::LANGUAGE_RU,
            self::LANGUAGE_SV,
            self::LANGUAGE_TR,
            self::LANGUAGE_ZH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['marketplace'] = isset($data['marketplace']) ? $data['marketplace'] : null;
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['url_return'] = isset($data['url_return']) ? $data['url_return'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['alias_to_update'] = isset($data['alias_to_update']) ? $data['alias_to_update'] : null;
        $this->container['payment_url'] = isset($data['payment_url']) ? $data['payment_url'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['uuid']) && (mb_strlen($this->container['uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'uuid', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['marketplace'] === null) {
            $invalidProperties[] = "'marketplace' can't be null";
        }
        if ($this->container['buyer'] === null) {
            $invalidProperties[] = "'buyer' can't be null";
        }
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($this->container['language']) && !in_array($this->container['language'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'language', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['url_return']) && (mb_strlen($this->container['url_return']) > 512)) {
            $invalidProperties[] = "invalid value for 'url_return', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 10)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) < 1)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['alias']) && (mb_strlen($this->container['alias']) > 50)) {
            $invalidProperties[] = "invalid value for 'alias', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['alias']) && (mb_strlen($this->container['alias']) < 1)) {
            $invalidProperties[] = "invalid value for 'alias', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['alias_to_update']) && (mb_strlen($this->container['alias_to_update']) > 50)) {
            $invalidProperties[] = "invalid value for 'alias_to_update', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['alias_to_update']) && (mb_strlen($this->container['alias_to_update']) < 1)) {
            $invalidProperties[] = "invalid value for 'alias_to_update', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_url']) && (mb_strlen($this->container['payment_url']) > 255)) {
            $invalidProperties[] = "invalid value for 'payment_url', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid Unique identifier. This field is automatically generated.
     *
     * @return $this
     */
    public function setUuid($uuid)
    {

        if (!is_null($uuid) && (mb_strlen($uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $uuid when calling OrderRegister., must be bigger than or equal to 1.');
        }

        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date. This field is automatically generated.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date of the last modification. This field is automatically generated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return string
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param string $marketplace marketplace
     *
     * @return $this
     */
    public function setMarketplace($marketplace)
    {
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \Swagger\Client\Model\Buyer
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Swagger\Client\Model\Buyer $buyer buyer
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language If no language is defined, the payment page will be displayed according to the user's browser default settings.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowedValues = $this->getLanguageAllowableValues();
        if (!is_null($language) && !in_array($language, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'language', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets url_return
     *
     * @return string
     */
    public function getUrlReturn()
    {
        return $this->container['url_return'];
    }

    /**
     * Sets url_return
     *
     * @param string $url_return Default URL to which the customer is redirected after the payment process.
     *
     * @return $this
     */
    public function setUrlReturn($url_return)
    {
        if (!is_null($url_return) && (mb_strlen($url_return) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url_return when calling OrderRegister., must be smaller than or equal to 512.');
        }

        $this->container['url_return'] = $url_return;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        if (!is_null($status) && (mb_strlen($status) > 10)) {
            throw new \InvalidArgumentException('invalid length for $status when calling OrderRegister., must be smaller than or equal to 10.');
        }
        if (!is_null($status) && (mb_strlen($status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $status when calling OrderRegister., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string $alias alias
     *
     * @return $this
     */
    public function setAlias($alias)
    {
        if (!is_null($alias) && (mb_strlen($alias) > 50)) {
            throw new \InvalidArgumentException('invalid length for $alias when calling OrderRegister., must be smaller than or equal to 50.');
        }
        if (!is_null($alias) && (mb_strlen($alias) < 1)) {
            throw new \InvalidArgumentException('invalid length for $alias when calling OrderRegister., must be bigger than or equal to 1.');
        }

        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets alias_to_update
     *
     * @return string
     */
    public function getAliasToUpdate()
    {
        return $this->container['alias_to_update'];
    }

    /**
     * Sets alias_to_update
     *
     * @param string $alias_to_update alias_to_update
     *
     * @return $this
     */
    public function setAliasToUpdate($alias_to_update)
    {
        if (!is_null($alias_to_update) && (mb_strlen($alias_to_update) > 50)) {
            throw new \InvalidArgumentException('invalid length for $alias_to_update when calling OrderRegister., must be smaller than or equal to 50.');
        }
        if (!is_null($alias_to_update) && (mb_strlen($alias_to_update) < 1)) {
            throw new \InvalidArgumentException('invalid length for $alias_to_update when calling OrderRegister., must be bigger than or equal to 1.');
        }

        $this->container['alias_to_update'] = $alias_to_update;

        return $this;
    }

    /**
     * Gets payment_url
     *
     * @return string
     */
    public function getPaymentUrl()
    {
        return $this->container['payment_url'];
    }

    /**
     * Sets payment_url
     *
     * @param string $payment_url URL address of the Payzen payment Form.
     *
     * @return $this
     */
    public function setPaymentUrl($payment_url)
    {
        if (!is_null($payment_url) && (mb_strlen($payment_url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $payment_url when calling OrderRegister., must be smaller than or equal to 255.');
        }

        $this->container['payment_url'] = $payment_url;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


