<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplace API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.10.8
 * Contact: support@lyra-network.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trans_uuid' => 'string',
        'order' => 'string',
        'sequence_number' => 'int',
        'paid_at' => '\DateTime',
        'auto_code' => 'string',
        'payment_scheme' => 'string',
        'amount' => 'int',
        'initial_amount' => 'int',
        'expected_capture_date' => 'string',
        'status' => 'string',
        'links' => '\Swagger\Client\Model\TransactionLinks',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trans_uuid' => null,
        'order' => null,
        'sequence_number' => null,
        'paid_at' => 'date-time',
        'auto_code' => null,
        'payment_scheme' => null,
        'amount' => null,
        'initial_amount' => null,
        'expected_capture_date' => null,
        'status' => null,
        'links' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trans_uuid' => 'trans_uuid',
        'order' => 'order',
        'sequence_number' => 'sequence_number',
        'paid_at' => 'paid_at',
        'auto_code' => 'auto_code',
        'payment_scheme' => 'payment_scheme',
        'amount' => 'amount',
        'initial_amount' => 'initial_amount',
        'expected_capture_date' => 'expected_capture_date',
        'status' => 'status',
        'links' => 'links',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trans_uuid' => 'setTransUuid',
        'order' => 'setOrder',
        'sequence_number' => 'setSequenceNumber',
        'paid_at' => 'setPaidAt',
        'auto_code' => 'setAutoCode',
        'payment_scheme' => 'setPaymentScheme',
        'amount' => 'setAmount',
        'initial_amount' => 'setInitialAmount',
        'expected_capture_date' => 'setExpectedCaptureDate',
        'status' => 'setStatus',
        'links' => 'setLinks',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trans_uuid' => 'getTransUuid',
        'order' => 'getOrder',
        'sequence_number' => 'getSequenceNumber',
        'paid_at' => 'getPaidAt',
        'auto_code' => 'getAutoCode',
        'payment_scheme' => 'getPaymentScheme',
        'amount' => 'getAmount',
        'initial_amount' => 'getInitialAmount',
        'expected_capture_date' => 'getExpectedCaptureDate',
        'status' => 'getStatus',
        'links' => 'getLinks',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_CREATED = 'CREATED';
    const STATUS_PENDING = 'PENDING';
    const STATUS_SUCCEEDED = 'SUCCEEDED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_FAILED = 'FAILED';
    const STATUS_EXPIRED = 'EXPIRED';
    const STATUS_TO_VALIDATE = 'TO_VALIDATE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PENDING,
            self::STATUS_SUCCEEDED,
            self::STATUS_CANCELLED,
            self::STATUS_FAILED,
            self::STATUS_EXPIRED,
            self::STATUS_TO_VALIDATE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trans_uuid'] = isset($data['trans_uuid']) ? $data['trans_uuid'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['paid_at'] = isset($data['paid_at']) ? $data['paid_at'] : null;
        $this->container['auto_code'] = isset($data['auto_code']) ? $data['auto_code'] : null;
        $this->container['payment_scheme'] = isset($data['payment_scheme']) ? $data['payment_scheme'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['initial_amount'] = isset($data['initial_amount']) ? $data['initial_amount'] : null;
        $this->container['expected_capture_date'] = isset($data['expected_capture_date']) ? $data['expected_capture_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['trans_uuid']) && (mb_strlen($this->container['trans_uuid']) > 36)) {
            $invalidProperties[] = "invalid value for 'trans_uuid', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['sequence_number']) && ($this->container['sequence_number'] > 32767)) {
            $invalidProperties[] = "invalid value for 'sequence_number', must be smaller than or equal to 32767.";
        }

        if (!is_null($this->container['sequence_number']) && ($this->container['sequence_number'] < 0)) {
            $invalidProperties[] = "invalid value for 'sequence_number', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['auto_code']) && (mb_strlen($this->container['auto_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'auto_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_scheme']) && (mb_strlen($this->container['payment_scheme']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_scheme', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['amount']) && ($this->container['amount'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['expected_capture_date'] === null) {
            $invalidProperties[] = "'expected_capture_date' can't be null";
        }
        if ((mb_strlen($this->container['expected_capture_date']) > 14)) {
            $invalidProperties[] = "invalid value for 'expected_capture_date', the character length must be smaller than or equal to 14.";
        }

        if ((mb_strlen($this->container['expected_capture_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'expected_capture_date', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trans_uuid
     *
     * @return string
     */
    public function getTransUuid()
    {
        return $this->container['trans_uuid'];
    }

    /**
     * Sets trans_uuid
     *
     * @param string $trans_uuid trans_uuid
     *
     * @return $this
     */
    public function setTransUuid($trans_uuid)
    {
        if (!is_null($trans_uuid) && (mb_strlen($trans_uuid) > 36)) {
            throw new \InvalidArgumentException('invalid length for $trans_uuid when calling Transaction., must be smaller than or equal to 36.');
        }

        $this->container['trans_uuid'] = $trans_uuid;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int $sequence_number sequence_number
     *
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {

        if (!is_null($sequence_number) && ($sequence_number > 32767)) {
            throw new \InvalidArgumentException('invalid value for $sequence_number when calling Transaction., must be smaller than or equal to 32767.');
        }
        if (!is_null($sequence_number) && ($sequence_number < 0)) {
            throw new \InvalidArgumentException('invalid value for $sequence_number when calling Transaction., must be bigger than or equal to 0.');
        }

        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets paid_at
     *
     * @return \DateTime
     */
    public function getPaidAt()
    {
        return $this->container['paid_at'];
    }

    /**
     * Sets paid_at
     *
     * @param \DateTime $paid_at paid_at
     *
     * @return $this
     */
    public function setPaidAt($paid_at)
    {
        $this->container['paid_at'] = $paid_at;

        return $this;
    }

    /**
     * Gets auto_code
     *
     * @return string
     */
    public function getAutoCode()
    {
        return $this->container['auto_code'];
    }

    /**
     * Sets auto_code
     *
     * @param string $auto_code auto_code
     *
     * @return $this
     */
    public function setAutoCode($auto_code)
    {

        if (!is_null($auto_code) && (mb_strlen($auto_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $auto_code when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['auto_code'] = $auto_code;

        return $this;
    }

    /**
     * Gets payment_scheme
     *
     * @return string
     */
    public function getPaymentScheme()
    {
        return $this->container['payment_scheme'];
    }

    /**
     * Sets payment_scheme
     *
     * @param string $payment_scheme payment_scheme
     *
     * @return $this
     */
    public function setPaymentScheme($payment_scheme)
    {

        if (!is_null($payment_scheme) && (mb_strlen($payment_scheme) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_scheme when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['payment_scheme'] = $payment_scheme;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {

        if (!is_null($amount) && ($amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Transaction., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($amount) && ($amount < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling Transaction., must be bigger than or equal to -2147483648.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets initial_amount
     *
     * @return int
     */
    public function getInitialAmount()
    {
        return $this->container['initial_amount'];
    }

    /**
     * Sets initial_amount
     *
     * @param int $initial_amount initial_amount
     *
     * @return $this
     */
    public function setInitialAmount($initial_amount)
    {
        $this->container['initial_amount'] = $initial_amount;

        return $this;
    }

    /**
     * Gets expected_capture_date
     *
     * @return string
     */
    public function getExpectedCaptureDate()
    {
        return $this->container['expected_capture_date'];
    }

    /**
     * Sets expected_capture_date
     *
     * @param string $expected_capture_date expected_capture_date
     *
     * @return $this
     */
    public function setExpectedCaptureDate($expected_capture_date)
    {
        if ((mb_strlen($expected_capture_date) > 14)) {
            throw new \InvalidArgumentException('invalid length for $expected_capture_date when calling Transaction., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($expected_capture_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $expected_capture_date when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['expected_capture_date'] = $expected_capture_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\TransactionLinks
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\TransactionLinks $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date. This field is automatically generated.
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date of the last modification. This field is automatically generated.
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


